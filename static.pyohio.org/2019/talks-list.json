[
  {
    "title": "A Brief History of Fire Brigades",
    "youtube_url": "http://youtu.be/RCOZjXSKIKg",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-27T12:30:00",
      "start": "2019-07-27T12:00:00"
    },
    "abstract": "The history of fire companies dates back millennia, but their current form is relatively new, just a few hundred years old. The evolution of these companies happened in parallel in different nations, but I\u2019d like to tell the story of how London\u2019s fire brigades became the public service we know today. We'll look at how fire departments have evolved starting with the Roman Empire all the way through the formation of the first publicly funded fire brigades in London. By the end, I hope to convince you that we need an Internet emergency service and that we should take a shortcut to get there.",
    "presentation_id": 140,
    "feedback_url": "https://pyohio.typeform.com/to/cSvPLb",
    "speakers": [
      {
        "photo": {
          "description": "Jon Banafato",
          "url": "https://static.pyohio.org/2019/speakers/138.jpg"
        },
        "website": "",
        "biography_html": "<p>Jon Banafato is a Python developer and event organizer living in NYC. He would love to see you attend <a href=\"https://pygotham.org\">PyGotham</a>.</p>",
        "name": "Jon Banafato",
        "mastodon": "",
        "biography": "Jon Banafato is a Python developer and event organizer living in NYC. He would love to see you attend [PyGotham](https://pygotham.org).",
        "speaker_id": 138,
        "twitter": "jonafato"
      }
    ],
    "abstract_html": "<p>The history of fire companies dates back millennia, but their current form is relatively new, just a few hundred years old. The evolution of these companies happened in parallel in different nations, but I\u2019d like to tell the story of how London\u2019s fire brigades became the public service we know today. We'll look at how fire departments have evolved starting with the Roman Empire all the way through the formation of the first publicly funded fire brigades in London. By the end, I hope to convince you that we need an Internet emergency service and that we should take a shortcut to get there.</p>",
    "description": "Publicly funded fire departments are critical to our society. We rely on them for fire prevention and fighting, and their influence has shaped our cities for centuries. It's time the software industry learned from history and created a public service of our own.",
    "description_html": "<p>Publicly funded fire departments are critical to our society. We rely on them for fire prevention and fighting, and their influence has shaped our cities for centuries. It's time the software industry learned from history and created a public service of our own.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T12:00:00"
  },
  {
    "title": "Adopt-a-pytest",
    "youtube_url": "http://youtu.be/0BzXV0J3-v8",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-27T11:45:00",
      "start": "2019-07-27T11:15:00"
    },
    "abstract": "## Who\r\n\r\nThis is for anyone currently using `unittest` for Python unit testing that would like to adopt `pytest`.\r\n\r\n## Takeaways\r\n\r\n* How to run `pytest`\r\n* How to create a basic `pytest` configuration\r\n* Using `pytest` marks to shim an existing project\r\n* Converting a `unittest` test to `pytest`\r\n\r\n## What\r\n\r\nWith its simplified syntax, powerful fixture behaviors, detailed test reports, and plugin-based architecture, `pytest` has a lot to offer. Whether you're new to Python unit testing or you've been using `unittest` for a while, `pytest` may be something to consider. It's not too hard to get up and running with `pytest` on a fresh project, but how can you retrofit an existing project without having to refactor the world all at once?",
    "presentation_id": 89,
    "feedback_url": "https://pyohio.typeform.com/to/BUZlUq",
    "speakers": [
      {
        "photo": {
          "description": "Dane Hillard",
          "url": "https://static.pyohio.org/2019/speakers/217.jpg"
        },
        "website": "https://dane.engineering",
        "biography_html": "<p>I'm working on <a href=\"https://manning.com/books/practices-of-the-python-pro\">Practices of the Python Pro</a> \ud83d\udc0d\ud83d\udcd8</p>\n<p>I enjoy building stuff in Python, Django, Vue, and CSS grid. When I'm not doing software stuff, I like exploring <a href=\"https://en.wikipedia.org/wiki/Foodways\">foodways</a>, <a href=\"https://www.danehillard.com\">fashion photography</a>, and <a href=\"https://littleleviathan.com\">writing music</a>.</p>",
        "name": "Dane Hillard",
        "mastodon": "",
        "biography": "I'm working on [Practices of the Python Pro](https://manning.com/books/practices-of-the-python-pro) \ud83d\udc0d\ud83d\udcd8\r\n\r\nI enjoy building stuff in Python, Django, Vue, and CSS grid. When I'm not doing software stuff, I like exploring [foodways](https://en.wikipedia.org/wiki/Foodways), [fashion photography](https://www.danehillard.com), and [writing music](https://littleleviathan.com).",
        "speaker_id": 217,
        "twitter": "easyaspython"
      }
    ],
    "abstract_html": "<h2>Who</h2>\n<p>This is for anyone currently using <code>unittest</code> for Python unit testing that would like to adopt <code>pytest</code>.</p>\n<h2>Takeaways</h2>\n<ul>\n<li>How to run <code>pytest</code></li>\n<li>How to create a basic <code>pytest</code> configuration</li>\n<li>Using <code>pytest</code> marks to shim an existing project</li>\n<li>Converting a <code>unittest</code> test to <code>pytest</code></li>\n</ul>\n<h2>What</h2>\n<p>With its simplified syntax, powerful fixture behaviors, detailed test reports, and plugin-based architecture, <code>pytest</code> has a lot to offer. Whether you're new to Python unit testing or you've been using <code>unittest</code> for a while, <code>pytest</code> may be something to consider. It's not too hard to get up and running with <code>pytest</code> on a fresh project, but how can you retrofit an existing project without having to refactor the world all at once?</p>",
    "description": "pytest is a testing framework that makes writing and running Python tests simpler. Adopting new tooling in a large system is often a burden. How can you introduce pytest gradually with minimal pain?",
    "description_html": "<p>pytest is a testing framework that makes writing and running Python tests simpler. Adopting new tooling in a large system is often a burden. How can you introduce pytest gradually with minimal pain?</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T11:15:00"
  },
  {
    "title": "A Gentle Introduction to Linear Programming in Python",
    "youtube_url": "http://youtu.be/H6hk0RhmAAs",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-27T14:45:00",
      "start": "2019-07-27T14:00:00"
    },
    "abstract": "## What is Linear Programming\r\nLinear programming is an optimization method with broad utility. Sadly the study of linear programming is often overlooked in favor of sexier machine learning algorithms by both practitioners and data science educators  (both bootcamps and  graduate programs). However, it is used extensively in many of the fields from which data science evolved and there are useful libraries in most of the major analytical languages. We will spend 5-10 minutes understanding linear programming in general before moving on to code\r\n\r\n## Linear Programming in Python\r\nIn Python, the most common library is Pulp which we will use to look at two separate optimization problems, one to minimize and one to maximize a desired outcome variable.\r\nWe will go through:\r\nSystem requirements\r\nPackage Installation\r\nComputational Complexity (floating values & discrete number calculations)\r\n\r\n\r\n## Real World Examples with Code\r\nWe will be setting up and completing the two problems. In doing so we will learn how to simplify a complex system into a series of linear equations.\r\n\r\nWe will learn about:\r\n * Decision Variables - the outcomes we choose to optimize\r\n * Objective Function - the series of relationships between decision variables which affect the optimization\r\n * Constraints - the limits on our decision variables which allocate resources \r\n * How to visualize the problem (it could be a graph or simple illustration)\r\n * How to  set up the equations defining the problem\r\n* How to solve the series of equations\r\n* How to interpret the results\r\n* How to know when you can, should or should not use linear programming to solve a problem\r\n\r\nThe presentation will be assume a base understanding of python algebra and linear equations (y=mx+b) but it is not going to be presented in a mathematically demanding way. We will look at real-world resource allocation problems and use simple python code to solve them.\r\n\r\n### Resources\r\nThere will be a fully fleshed out GITHUB repository with:\r\n * The slides\r\n * The code\r\n * Brief instructional README.md with links to other useful online sources",
    "presentation_id": 139,
    "feedback_url": "https://pyohio.typeform.com/to/asj3VO",
    "speakers": [
      {
        "photo": {
          "description": "Bethany Poulin",
          "url": "https://static.pyohio.org/2019/speakers/155.jpeg"
        },
        "website": "",
        "biography_html": "<p>I  am a practicing data scientist, self-learned programmer, former high school teacher and all around geek who is patently in love with data and exploration of the physical world via sensors and demographics. I just left working in Public Health as a Data Scientist to explore new avenues in data driven development and hope to engage more fully in the python community by locally and globally.</p>",
        "name": "Bethany Poulin",
        "mastodon": "",
        "biography": "I  am a practicing data scientist, self-learned programmer, former high school teacher and all around geek who is patently in love with data and exploration of the physical world via sensors and demographics. I just left working in Public Health as a Data Scientist to explore new avenues in data driven development and hope to engage more fully in the python community by locally and globally.",
        "speaker_id": 155,
        "twitter": ""
      }
    ],
    "abstract_html": "<h2>What is Linear Programming</h2>\n<p>Linear programming is an optimization method with broad utility. Sadly the study of linear programming is often overlooked in favor of sexier machine learning algorithms by both practitioners and data science educators  (both bootcamps and  graduate programs). However, it is used extensively in many of the fields from which data science evolved and there are useful libraries in most of the major analytical languages. We will spend 5-10 minutes understanding linear programming in general before moving on to code</p>\n<h2>Linear Programming in Python</h2>\n<p>In Python, the most common library is Pulp which we will use to look at two separate optimization problems, one to minimize and one to maximize a desired outcome variable.\nWe will go through:\nSystem requirements\nPackage Installation\nComputational Complexity (floating values &amp; discrete number calculations)</p>\n<h2>Real World Examples with Code</h2>\n<p>We will be setting up and completing the two problems. In doing so we will learn how to simplify a complex system into a series of linear equations.</p>\n<p>We will learn about:\n * Decision Variables - the outcomes we choose to optimize\n * Objective Function - the series of relationships between decision variables which affect the optimization\n * Constraints - the limits on our decision variables which allocate resources \n * How to visualize the problem (it could be a graph or simple illustration)\n * How to  set up the equations defining the problem\n<em> How to solve the series of equations\n</em> How to interpret the results\n* How to know when you can, should or should not use linear programming to solve a problem</p>\n<p>The presentation will be assume a base understanding of python algebra and linear equations (y=mx+b) but it is not going to be presented in a mathematically demanding way. We will look at real-world resource allocation problems and use simple python code to solve them.</p>\n<h3>Resources</h3>\n<p>There will be a fully fleshed out GITHUB repository with:\n * The slides\n * The code\n * Brief instructional README.md with links to other useful online sources</p>",
    "description": "Linear programming is a useful computational technique for finding minima or maxima of a complex system by breaking it into a series of linear equations which describe the systems. It has many practical applications in industry, medicine, agriculture and in retail environments. Together we will explore simple linear programming problems using Python and the module Pulp.",
    "description_html": "<p>Linear programming is a useful computational technique for finding minima or maxima of a complex system by breaking it into a series of linear equations which describe the systems. It has many practical applications in industry, medicine, agriculture and in retail environments. Together we will explore simple linear programming problems using Python and the module Pulp.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T14:00:00"
  },
  {
    "title": "A Hands-On Guide to Building Interactive Command-Line Apps with cmd2",
    "youtube_url": "http://youtu.be/pebeWrTqIIw",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-27T14:45:00",
      "start": "2019-07-27T14:00:00"
    },
    "abstract": "Interactive command-line applications (CLIs) are used extensively in many real-world scenarios, particularly in the DevOps and Security communities as well as for internal developer tooling and automation.  I'm sure many of you have used the wonderful [ipython](https://ipython.org) interactive Python shell which is a good example of a CLI.  Python has the built-in [cmd](https://docs.python.org/3/library/cmd.html) library for creating CLIs, but it is extremely bare-bones.  The [cmd2](https://github.com/python-cmd2/cmd2) package is a batteries-included extension of `cmd` which makes it much quicker and easier to create feature-rich and user-friendly CLIs.\r\n\r\nThe presentation will first explain how to install `cmd2`.  The talk will next show how to create a basic `cmd2` application.  Then the talk will progressively add features to this application while demonstrating the capabilities built into `cmd2`.  In the end, the presentation will show how to build a basic but feature-rich and user-friendly CLI application from scratch. This application will include many features which make it easy to use for customers, including:\r\n\r\n* Built-in help\r\n* Top-notch tab-completion\r\n* Shell-like functionality including ability to run shell commands, pipe to shell commands, and redirect output to files\r\n* Built-in application scripting\r\n* Built-in Python scripting\r\n* Built-in history\r\n* Command aliases and macros\r\n\r\nUltimately, people who attend this talk will learn how to use the Python programming language with the `cmd2` package to quickly and efficiently build their own interactive command-line applications.",
    "presentation_id": 68,
    "feedback_url": "https://pyohio.typeform.com/to/is8CtM",
    "speakers": [
      {
        "photo": {
          "description": "Todd Leonhardt",
          "url": "https://static.pyohio.org/2019/speakers/204.jpeg"
        },
        "website": "https://github.com/tleonhardt",
        "biography_html": "<p><a href=\"https://github.com/tleonhardt\">Well-rounded polyglot developer</a> who has specialized at one point or another in cloud services, cryptography and security tooling, and embedded systems. Currently a developer at Amazon Web Services (<a href=\"https://aws.amazon.com\">AWS</a>): we offer IT infrastructure services to businesses and individuals. I have written a lot of software in a mix of Python, Java, and C++, but Python is my favorite language to work in.  My experience with Python dates back to 2003 where I initially used it as a free Matlab replacement. Recently I have enjoyed contributing to the open-source <a href=\"https://github.com/python-cmd2/cmd2\">cmd2</a> project.</p>",
        "name": "Todd Leonhardt",
        "mastodon": "",
        "biography": "[Well-rounded polyglot developer](https://github.com/tleonhardt) who has specialized at one point or another in cloud services, cryptography and security tooling, and embedded systems. Currently a developer at Amazon Web Services ([AWS](https://aws.amazon.com)): we offer IT infrastructure services to businesses and individuals. I have written a lot of software in a mix of Python, Java, and C++, but Python is my favorite language to work in.  My experience with Python dates back to 2003 where I initially used it as a free Matlab replacement. Recently I have enjoyed contributing to the open-source [cmd2](https://github.com/python-cmd2/cmd2) project.",
        "speaker_id": 204,
        "twitter": ""
      },
      {
        "photo": {
          "description": "Kevin Van Brunt",
          "url": "https://static.pyohio.org/2019/speakers/222.jpg"
        },
        "website": "",
        "biography_html": "",
        "name": "Kevin Van Brunt",
        "mastodon": "",
        "biography": "",
        "speaker_id": 222,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>Interactive command-line applications (CLIs) are used extensively in many real-world scenarios, particularly in the DevOps and Security communities as well as for internal developer tooling and automation.  I'm sure many of you have used the wonderful <a href=\"https://ipython.org\">ipython</a> interactive Python shell which is a good example of a CLI.  Python has the built-in <a href=\"https://docs.python.org/3/library/cmd.html\">cmd</a> library for creating CLIs, but it is extremely bare-bones.  The <a href=\"https://github.com/python-cmd2/cmd2\">cmd2</a> package is a batteries-included extension of <code>cmd</code> which makes it much quicker and easier to create feature-rich and user-friendly CLIs.</p>\n<p>The presentation will first explain how to install <code>cmd2</code>.  The talk will next show how to create a basic <code>cmd2</code> application.  Then the talk will progressively add features to this application while demonstrating the capabilities built into <code>cmd2</code>.  In the end, the presentation will show how to build a basic but feature-rich and user-friendly CLI application from scratch. This application will include many features which make it easy to use for customers, including:</p>\n<ul>\n<li>Built-in help</li>\n<li>Top-notch tab-completion</li>\n<li>Shell-like functionality including ability to run shell commands, pipe to shell commands, and redirect output to files</li>\n<li>Built-in application scripting</li>\n<li>Built-in Python scripting</li>\n<li>Built-in history</li>\n<li>Command aliases and macros</li>\n</ul>\n<p>Ultimately, people who attend this talk will learn how to use the Python programming language with the <code>cmd2</code> package to quickly and efficiently build their own interactive command-line applications.</p>",
    "description": "Interactive command-line (CLI) applications are extremely popular in the DevOps and Security communities as well as for internal tooling and automation.  Have you ever wanted to build an awesome CLI application using Python but don't know where to get started?   This talk will show you how to use the cmd2 package to quickly and easily build feature-rich and user-friendly CLI apps in Python.",
    "description_html": "<p>Interactive command-line (CLI) applications are extremely popular in the DevOps and Security communities as well as for internal tooling and automation.  Have you ever wanted to build an awesome CLI application using Python but don't know where to get started?   This talk will show you how to use the cmd2 package to quickly and easily build feature-rich and user-friendly CLI apps in Python.</p>",
    "kind": "45-minute Talk",
    "start_time": "2019-07-27T14:00:00"
  },
  {
    "title": "A Practical Introduction to Integer Linear Programming",
    "youtube_url": "http://youtu.be/tK-Tiu7kyv8",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-28T15:00:00",
      "start": "2019-07-28T14:30:00"
    },
    "abstract": "How do airlines choose which planes service which routes? How does a hospital optimize the shift schedule for hundreds of doctors and nurses? How do you choose the optimal location for a group of fulfillment centers, or oil derricks, or cell towers? These kinds of problems (and many others!) can be solved with integer linear programming (ILP), a powerful and decades-old framework for solving optimization problems. In this talk we will give a brief introduction to ILP and describe it's uses, strengths, and weaknesses. We will also show how to solve a real-world vehicle routing problem using Google's open-source python library for ILP. Trigger warning: this talk will contain high-school level math.",
    "presentation_id": 86,
    "feedback_url": "https://pyohio.typeform.com/to/wT1JF9",
    "speakers": [
      {
        "photo": {
          "description": "Igor Ferst",
          "url": "https://static.pyohio.org/2019/speakers/250.jpeg"
        },
        "website": "",
        "biography_html": "<p>Igor Ferst is co-founder and CTO at Mobikit, where he leads a team of software engineers building a platform for mobility data. Igor has spent his career building tools that let people do amazing things with data at companies like Root Insurance, Google, and Palantir. Before working in software, Igor was an aspiring academic who published original research in math and computer science, earning an Erd\u0151s number of 2. Igor holds a B.S. in math from the University of Chicago, an M.S. in math from the University of Waterloo, and an M.S in computer science from Cornell University.</p>",
        "name": "Igor Ferst",
        "mastodon": "",
        "biography": "Igor Ferst is co-founder and CTO at Mobikit, where he leads a team of software engineers building a platform for mobility data. Igor has spent his career building tools that let people do amazing things with data at companies like Root Insurance, Google, and Palantir. Before working in software, Igor was an aspiring academic who published original research in math and computer science, earning an Erd\u0151s number of 2. Igor holds a B.S. in math from the University of Chicago, an M.S. in math from the University of Waterloo, and an M.S in computer science from Cornell University.",
        "speaker_id": 250,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>How do airlines choose which planes service which routes? How does a hospital optimize the shift schedule for hundreds of doctors and nurses? How do you choose the optimal location for a group of fulfillment centers, or oil derricks, or cell towers? These kinds of problems (and many others!) can be solved with integer linear programming (ILP), a powerful and decades-old framework for solving optimization problems. In this talk we will give a brief introduction to ILP and describe it's uses, strengths, and weaknesses. We will also show how to solve a real-world vehicle routing problem using Google's open-source python library for ILP. Trigger warning: this talk will contain high-school level math.</p>",
    "description": "Integer linear programming (ILP) is a powerful framework for solving optimization problems related to scheduling, resource allocation, vehicle routing, and many other areas. This talk will give a brief introduction to ILP and show how to solve a real-world vehicle routing problem using Google's open-source python library for ILP.",
    "description_html": "<p>Integer linear programming (ILP) is a powerful framework for solving optimization problems related to scheduling, resource allocation, vehicle routing, and many other areas. This talk will give a brief introduction to ILP and show how to solve a real-world vehicle routing problem using Google's open-source python library for ILP.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T14:30:00"
  },
  {
    "title": "Automated Discovery of Cancer Types from Genes",
    "youtube_url": "http://youtu.be/og-K4CbyOiw",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-28T15:00:00",
      "start": "2019-07-28T14:30:00"
    },
    "abstract": "While many other diseases are relatively predictable and treatable, cancer is very diverse and unpredictable, making diagnosis, treatment, and control extremely difficult. Traditional methods try to treat cancer based on the organ of origin in the body, such as breast or brain cancer, but this type of classification is often inadequate. If we are able to identify cancers based on their gene expressions, there is hope to find better medicines and treatment methods. However, gene expression data is so vast that humans cannot detect such patterns. In this project, the approach is to apply unsupervised deep learning to automatically identify cancer subtypes. In addition, we seek to organize patients based on their gene expression similarities, in order to make the recognition of similar patients easier.\r\n\r\nWhile traditional clustering algorithms use nearest neighbor methods and linear mappings, we use a recently developed technique called Variational Autoencoding (VAE) that can automatically find clinically meaningful patterns and therefore find clusters that have medicinal significance. Python-based deep learning framework, Keras, offers an elegant way of defining such a VAE model, training, and applying it. In this work, the data of 11,000 patients across 32 different cancer types was retrieved from The Cancer Genome Atlas. A VAE was used to compress 5000 dimensions into 100 clinically meaningful dimensions. Then, the data was reduced to two dimensions for visualization using tSNE (t-distributed stochastic neighbor embedding). Finally, an interactive Javascript scatter plot was created. We noticed that the VAE representation correctly clustered existing types, identified new subtypes, and pointed to similarities across cancer types. This interactive plot of patient data also allows the study of nearest patients, and when a classification task was created to validate the accuracy of the representation, it achieved 98% accuracy. The hope is that this tool will allow doctors to quickly identify specific subtypes of cancer found using gene expression and allow for further study into treatments provided to other patients who had similar gene expressions.",
    "presentation_id": 99,
    "feedback_url": "https://pyohio.typeform.com/to/iJXzVy",
    "speakers": [
      {
        "photo": {
          "description": "Shruthi Ravichandran",
          "url": "https://static.pyohio.org/2019/speakers/267.png"
        },
        "website": "",
        "biography_html": "<p>Shruthi Ravichandran is a sophomore at Hathaway Brown School in Cleveland, OH. She loves to code and in the past has worked on projects related to astronomy, medicine, healthcare, and renewable energy, including software and hardware. She does research in the Omega-Nano Lab, a biomedical engineering lab at Case Western Reserve University, regarding drug delivery and immunotherapy for cancer treatment. In her free time, she enjoys singing, painting, knitting, and dancing. She would like to apply computer science to space and biomedical engineering, her subjects of interests, to solve problems in those spheres.</p>",
        "name": "Shruthi Ravichandran",
        "mastodon": "",
        "biography": "Shruthi Ravichandran is a sophomore at Hathaway Brown School in Cleveland, OH. She loves to code and in the past has worked on projects related to astronomy, medicine, healthcare, and renewable energy, including software and hardware. She does research in the Omega-Nano Lab, a biomedical engineering lab at Case Western Reserve University, regarding drug delivery and immunotherapy for cancer treatment. In her free time, she enjoys singing, painting, knitting, and dancing. She would like to apply computer science to space and biomedical engineering, her subjects of interests, to solve problems in those spheres.",
        "speaker_id": 267,
        "twitter": "sravi2018"
      }
    ],
    "abstract_html": "<p>While many other diseases are relatively predictable and treatable, cancer is very diverse and unpredictable, making diagnosis, treatment, and control extremely difficult. Traditional methods try to treat cancer based on the organ of origin in the body, such as breast or brain cancer, but this type of classification is often inadequate. If we are able to identify cancers based on their gene expressions, there is hope to find better medicines and treatment methods. However, gene expression data is so vast that humans cannot detect such patterns. In this project, the approach is to apply unsupervised deep learning to automatically identify cancer subtypes. In addition, we seek to organize patients based on their gene expression similarities, in order to make the recognition of similar patients easier.</p>\n<p>While traditional clustering algorithms use nearest neighbor methods and linear mappings, we use a recently developed technique called Variational Autoencoding (VAE) that can automatically find clinically meaningful patterns and therefore find clusters that have medicinal significance. Python-based deep learning framework, Keras, offers an elegant way of defining such a VAE model, training, and applying it. In this work, the data of 11,000 patients across 32 different cancer types was retrieved from The Cancer Genome Atlas. A VAE was used to compress 5000 dimensions into 100 clinically meaningful dimensions. Then, the data was reduced to two dimensions for visualization using tSNE (t-distributed stochastic neighbor embedding). Finally, an interactive Javascript scatter plot was created. We noticed that the VAE representation correctly clustered existing types, identified new subtypes, and pointed to similarities across cancer types. This interactive plot of patient data also allows the study of nearest patients, and when a classification task was created to validate the accuracy of the representation, it achieved 98% accuracy. The hope is that this tool will allow doctors to quickly identify specific subtypes of cancer found using gene expression and allow for further study into treatments provided to other patients who had similar gene expressions.</p>",
    "description": "Cancer treatment often focuses on organ of origin, but different types can occur in one organ. Gene expression provides valuable clues of the cancer type, but studying data manually is difficult. Instead, we use variational autoencoding, a deep learning method, to derive 36-dimensional feature space from 5000-dimensional gene space and show its efficacy in classification and a TSNE visualization.",
    "description_html": "<p>Cancer treatment often focuses on organ of origin, but different types can occur in one organ. Gene expression provides valuable clues of the cancer type, but studying data manually is difficult. Instead, we use variational autoencoding, a deep learning method, to derive 36-dimensional feature space from 5000-dimensional gene space and show its efficacy in classification and a TSNE visualization.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T14:30:00"
  },
  {
    "title": "A/V Streaming Workflow in Python",
    "youtube_url": "http://youtu.be/XYZ--owG7dg",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-28T16:45:00",
      "start": "2019-07-28T16:15:00"
    },
    "abstract": "If you are into the live stream, podcast or planning to stream live you might come across different platforms like Periscope, YouTube Live, Facebook Live, etc.,  where you can log in and start your live streaming. However, when it comes to manipulating your streams, these platforms don\u2019t have that functionality exposed to end users. On top of this, these platforms are one to one streaming platforms; there is not an easy way to broadcast your stream directly to multiple platforms. In this talk, we will talk about how we can create an application to capture gameplay/screen content, manipulate your stream, record the captured content locally, and stream it on different streaming platforms concurrently.",
    "presentation_id": 106,
    "feedback_url": "https://pyohio.typeform.com/to/m2eoV7",
    "speakers": [
      {
        "photo": {
          "description": "Shishir Pokharel",
          "url": "https://static.pyohio.org/2019/speakers/202.jpg"
        },
        "website": "",
        "biography_html": "<p>Shishir Pokharel (Shi-shir Po-kha-rel) is from SF Bay Area where he works as a Sr. Principal Engineer at ON24 Inc, webcasting and virtual event and environment technology company. He has 14 years of experience as a Software engineer with a focus on System Programming and took the plunge into Python in 2014. In his spare time, he is an avid architect for home autonomous home system and lover of online gaming.</p>",
        "name": "Shishir Pokharel",
        "mastodon": "",
        "biography": "Shishir Pokharel (Shi-shir Po-kha-rel) is from SF Bay Area where he works as a Sr. Principal Engineer at ON24 Inc, webcasting and virtual event and environment technology company. He has 14 years of experience as a Software engineer with a focus on System Programming and took the plunge into Python in 2014. In his spare time, he is an avid architect for home autonomous home system and lover of online gaming.",
        "speaker_id": 202,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>If you are into the live stream, podcast or planning to stream live you might come across different platforms like Periscope, YouTube Live, Facebook Live, etc.,  where you can log in and start your live streaming. However, when it comes to manipulating your streams, these platforms don\u2019t have that functionality exposed to end users. On top of this, these platforms are one to one streaming platforms; there is not an easy way to broadcast your stream directly to multiple platforms. In this talk, we will talk about how we can create an application to capture gameplay/screen content, manipulate your stream, record the captured content locally, and stream it on different streaming platforms concurrently.</p>",
    "description": "A/V Streaming has been used widely but being able to manipulate the stream on your custom requirements has always been challenging. We discuss how we can overcome with this challenge and build custom streaming pipeline with the help of open source multimedia framework and Python libraries for Gst, Gib, and GObject.",
    "description_html": "<p>A/V Streaming has been used widely but being able to manipulate the stream on your custom requirements has always been challenging. We discuss how we can overcome with this challenge and build custom streaming pipeline with the help of open source multimedia framework and Python libraries for Gst, Gib, and GObject.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T16:15:00"
  },
  {
    "title": "Becoming a Better Curator of Your Code",
    "youtube_url": "http://youtu.be/lpg5YRrce58",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-27T11:00:00",
      "start": "2019-07-27T10:30:00"
    },
    "abstract": "We will start the talk with an introduction to the role of a curator and how it applies to software engineers.\r\n\r\nIn this talk we will discuss some principals and techniques that enable us to produce better code but applying them with the curation mindset of maintaining  code quality beyond producing the next bug free feature.\r\n\r\nSome of the topics we will cover:\r\n\r\n* Promote the use of conventions and style guides for your team \r\n* Code readability matters\r\n* The first goal of writing tests should be to document the code functionality\r\n* Encourage discussion on feature implementation\r\n* Encourage discussion during code reviews\r\n* Boy Scout rule - leave the code in a better shape than which you found it\r\n* Embrace new and mature technologies, and try to incorporate them into your code when applicable\r\n\r\nAt the end of the talk we will review the software curation mindset and how you can bring it to your organization.",
    "presentation_id": 119,
    "feedback_url": "https://pyohio.typeform.com/to/IgcDfM",
    "speakers": [
      {
        "photo": {
          "description": "Ian Zelikman",
          "url": "https://static.pyohio.org/2019/speakers/123.png"
        },
        "website": "",
        "biography_html": "<p>Ian has been been developing code for over 10 years.</p>\n<p>He started his career developing application for weather forecasting and analysis.\nIan has been working with Python for over 6 years developing scalable and reliable back-end systems.\nHe enjoys finding new Python packages to explore and find new uses for them</p>",
        "name": "Ian Zelikman",
        "mastodon": "",
        "biography": "Ian has been been developing code for over 10 years.\r\n\r\nHe started his career developing application for weather forecasting and analysis.\r\nIan has been working with Python for over 6 years developing scalable and reliable back-end systems.\r\nHe enjoys finding new Python packages to explore and find new uses for them",
        "speaker_id": 123,
        "twitter": "izcoder"
      }
    ],
    "abstract_html": "<p>We will start the talk with an introduction to the role of a curator and how it applies to software engineers.</p>\n<p>In this talk we will discuss some principals and techniques that enable us to produce better code but applying them with the curation mindset of maintaining  code quality beyond producing the next bug free feature.</p>\n<p>Some of the topics we will cover:</p>\n<ul>\n<li>Promote the use of conventions and style guides for your team </li>\n<li>Code readability matters</li>\n<li>The first goal of writing tests should be to document the code functionality</li>\n<li>Encourage discussion on feature implementation</li>\n<li>Encourage discussion during code reviews</li>\n<li>Boy Scout rule - leave the code in a better shape than which you found it</li>\n<li>Embrace new and mature technologies, and try to incorporate them into your code when applicable</li>\n</ul>\n<p>At the end of the talk we will review the software curation mindset and how you can bring it to your organization.</p>",
    "description": "Writing code that functions correctly is only part of the development process. The majority of our time is spent reading, maintaining and refactoring our code.\r\n\r\nIn this talk we will discuss how when we see our work as code curation we actually enable our job to be much easier and productive.",
    "description_html": "<p>Writing code that functions correctly is only part of the development process. The majority of our time is spent reading, maintaining and refactoring our code.</p>\n<p>In this talk we will discuss how when we see our work as code curation we actually enable our job to be much easier and productive.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T10:30:00"
  },
  {
    "title": "Big Data with Small Computers: Building a Hadoop Cluster with Raspberry Pis",
    "youtube_url": "http://youtu.be/lQyX7iAsQQU",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-27T11:00:00",
      "start": "2019-07-27T10:30:00"
    },
    "abstract": "1. Details of the hardware set up - Raspberry Pis and network set up to create a functional cluster. \r\n2. Installing Hadoop, Yarn, HDFS, Spark etc and different software.\r\n3. Different data sets and how to use your newly built cluster to analyze data. \r\n4. Using powerful Spark technologies to quickly analyze datasets. \r\n5. Overview of open source technologies in creating a personal, powerful data cluster.",
    "presentation_id": 112,
    "feedback_url": "https://pyohio.typeform.com/to/wFDZfs",
    "speakers": [
      {
        "photo": {
          "description": "Alexandria Kalika",
          "url": "https://static.pyohio.org/2019/speakers/254.jpg"
        },
        "website": "",
        "biography_html": "<p>Alexandria has been in technology for over 10 years in different fields like QA, developer, Hadoop administrator and data analyst. She has a bachelor's degree in Physics which makes her love all things science and she enjoys exploring new applications of technology. She also enjoys data science and loves exploring different ways of getting kids and adults from all backgrounds into technology fields.</p>",
        "name": "Alexandria Kalika",
        "mastodon": "",
        "biography": "Alexandria has been in technology for over 10 years in different fields like QA, developer, Hadoop administrator and data analyst. She has a bachelor's degree in Physics which makes her love all things science and she enjoys exploring new applications of technology. She also enjoys data science and loves exploring different ways of getting kids and adults from all backgrounds into technology fields.",
        "speaker_id": 254,
        "twitter": ""
      }
    ],
    "abstract_html": "<ol>\n<li>Details of the hardware set up - Raspberry Pis and network set up to create a functional cluster. </li>\n<li>Installing Hadoop, Yarn, HDFS, Spark etc and different software.</li>\n<li>Different data sets and how to use your newly built cluster to analyze data. </li>\n<li>Using powerful Spark technologies to quickly analyze datasets. </li>\n<li>Overview of open source technologies in creating a personal, powerful data cluster.</li>\n</ol>",
    "description": "The Hadoop ecosystem created a wide array of amazing tools and technologies that made processing of large amounts of data easier and more fun. In this talk I will go through how to use Raspberry Pi 2s to create a distributed cluster worthy of interesting data analysis. I will use Apache Spark and other open source, easy to obtain software and hardware for data insights.",
    "description_html": "<p>The Hadoop ecosystem created a wide array of amazing tools and technologies that made processing of large amounts of data easier and more fun. In this talk I will go through how to use Raspberry Pi 2s to create a distributed cluster worthy of interesting data analysis. I will use Apache Spark and other open source, easy to obtain software and hardware for data insights.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T10:30:00"
  },
  {
    "title": "Building Docs like Code: Continuous Integration for Documentation",
    "youtube_url": "http://youtu.be/sBmIicMLOWs",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-27T16:15:00",
      "start": "2019-07-27T15:45:00"
    },
    "abstract": "It is common for developers to overlook the documentation of their works. They are either on a time crunch, lack the proper tooling, or simply just forget to create and update the documentation. Whatever the cause behind this, it is not a proper excuse for not keeping the documentation up to date. However, for all our development processes there are few as neglected as the documentation process. Documentation should be treated as important as the code that makes up the project. In this talk we'll take a look at current documentation processes and discuss moving the documentation into the code. With modern documentation tools such as MkDocs and Sphinx, both of which are Python powered tools, and Continuous Integration tools we can now include docs in the commit. They can be reviewed in code reviews, built and versioned in a CI tool, and even tested for things such as correct code examples and broken links. This is the process that the developer knows, understands, and enjoys. I introduced a team to this exact workflow and a working pipeline; all they had to do was keep the documentation up to date. This team currently has some of the most up to date documentation in a company of near two thousand engineers, and they never complain about writing/updating documentation. It\u2019s just part of the workflow.",
    "presentation_id": 109,
    "feedback_url": "https://pyohio.typeform.com/to/B6ip0q",
    "speakers": [
      {
        "photo": {
          "description": "Mason Egger",
          "url": "https://static.pyohio.org/2019/speakers/215.png"
        },
        "website": "",
        "biography_html": "<p>Mason Egger is a Senior Site Reliability Engineer at HomeAway, where he works on the internal PaaS that hosts all of HomeAway's websites, data streaming, and tooling. He is an avid programmer, musician, educator, and writer/blogger at <a href=\"https://www.masonegger.com\">masonegger.com</a>. In his spare time he enjoys camping, kayaking, and exploring new places.</p>",
        "name": "Mason Egger",
        "mastodon": "",
        "biography": "Mason Egger is a Senior Site Reliability Engineer at HomeAway, where he works on the internal PaaS that hosts all of HomeAway's websites, data streaming, and tooling. He is an avid programmer, musician, educator, and writer/blogger at [masonegger.com](https://www.masonegger.com). In his spare time he enjoys camping, kayaking, and exploring new places.",
        "speaker_id": 215,
        "twitter": "masonegger"
      }
    ],
    "abstract_html": "<p>It is common for developers to overlook the documentation of their works. They are either on a time crunch, lack the proper tooling, or simply just forget to create and update the documentation. Whatever the cause behind this, it is not a proper excuse for not keeping the documentation up to date. However, for all our development processes there are few as neglected as the documentation process. Documentation should be treated as important as the code that makes up the project. In this talk we'll take a look at current documentation processes and discuss moving the documentation into the code. With modern documentation tools such as MkDocs and Sphinx, both of which are Python powered tools, and Continuous Integration tools we can now include docs in the commit. They can be reviewed in code reviews, built and versioned in a CI tool, and even tested for things such as correct code examples and broken links. This is the process that the developer knows, understands, and enjoys. I introduced a team to this exact workflow and a working pipeline; all they had to do was keep the documentation up to date. This team currently has some of the most up to date documentation in a company of near two thousand engineers, and they never complain about writing/updating documentation. It\u2019s just part of the workflow.</p>",
    "description": "Project documentation is easy to neglect. Keep your docs inside your source repo and learn how to automatically build and publish beautiful docs on every commit. Viewers will leave with a new mindset on how to handle documentation, tooling for this process, and an easy-to-implement method to achieve this.",
    "description_html": "<p>Project documentation is easy to neglect. Keep your docs inside your source repo and learn how to automatically build and publish beautiful docs on every commit. Viewers will leave with a new mindset on how to handle documentation, tooling for this process, and an easy-to-implement method to achieve this.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T15:45:00"
  },
  {
    "title": "Changing Lives through Open Source, Passion and Mentoring",
    "youtube_url": "http://youtu.be/-bBHXimlfPQ",
    "schedule": {
      "room": "Cartoon 1, Cartoon 2",
      "end": "2019-07-27T10:00:00",
      "start": "2019-07-27T09:15:00"
    },
    "abstract": "This is the story of my journey and how mentorship can change lives.",
    "presentation_id": 126,
    "feedback_url": "https://pyohio.typeform.com/to/Uopw5w",
    "speakers": [
      {
        "photo": {
          "description": "Kattni Rembor",
          "url": "https://static.pyohio.org/2019/speakers/233.jpg"
        },
        "website": "",
        "biography_html": "<p>Kattni works as an embedded software developer, hardware designer, technical writer, and open source community leader working with Adafruit. She is proud to be a woman in tech. Her journey creating things began at an early age in her dad\u2019s extensive workshop in the basement. Kattni\u2019s foray into the amazing world of open source, electronics, and programming began two years ago \u2014 that her desk has become a mess of wires and circuit boards, soldering irons and computers is still unbelievably exciting. In the rest of her life, she is a maker, creator, programmer, artist, photographer, one-time gardener, and loved partner. She is tolerated by two cats who continue to let her live with them.</p>",
        "name": "Kattni Rembor",
        "mastodon": "",
        "biography": "Kattni works as an embedded software developer, hardware designer, technical writer, and open source community leader working with Adafruit. She is proud to be a woman in tech. Her journey creating things began at an early age in her dad\u2019s extensive workshop in the basement. Kattni\u2019s foray into the amazing world of open source, electronics, and programming began two years ago \u2014 that her desk has become a mess of wires and circuit boards, soldering irons and computers is still unbelievably exciting. In the rest of her life, she is a maker, creator, programmer, artist, photographer, one-time gardener, and loved partner. She is tolerated by two cats who continue to let her live with them.",
        "speaker_id": 233,
        "twitter": "kattni"
      }
    ],
    "abstract_html": "<p>This is the story of my journey and how mentorship can change lives.</p>",
    "description": "In trying to learn Python, I stumbled into a passion I had never considered. My path began with learning Python on hardware. Through mentorship and the help of friends, I began to flourish. Since then I have continued to contribute in ways I never thought possible, between code, community, and becoming a mentor myself.",
    "description_html": "<p>In trying to learn Python, I stumbled into a passion I had never considered. My path began with learning Python on hardware. Through mentorship and the help of friends, I began to flourish. Since then I have continued to contribute in ways I never thought possible, between code, community, and becoming a mentor myself.</p>",
    "kind": "Keynote",
    "start_time": "2019-07-27T09:15:00"
  },
  {
    "title": "Deep Learning Like a Viking: Building Convolutional Neural Networks with Keras",
    "youtube_url": "http://youtu.be/A89l8GwsUNY",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-28T16:00:00",
      "start": "2019-07-28T15:15:00"
    },
    "abstract": "The Vikings came from the land of ice and snow, from the midnight sun, where the hot springs flow. In addition to longships and bad attitudes, they had a system of writing that we, in modern times, have dubbed the Younger Futhark (or \u16a0\u16a2\u16a6\u16ac\u16b1\u16b4 if you're a Viking). These sigils are more commonly called runes and have been mimicked in fantasy literature and role-playing games for decades.\r\n\r\nOf course, having an alphabet, runic or otherwise, solves lots of problems. But, it also introduces others. The Vikings had the same problem we do today. How were they to get their automated software systems to recognize the hand-carved input of a typical boatman? Of course, they were never able to solve this problem and were instead forced into a life of burning and pillaging. Today, we have deep learning and neural networks and can, fortunately, avoid such a fate.\r\n\r\nWhen we're done, you'll understand how Convolution Neural Networks work, how to build your own using Python and Keras, and how to make it a part of an application using Flask. Maybe you'll even try seeing what it thinks of the Bluetooth logo?",
    "presentation_id": 71,
    "feedback_url": "https://pyohio.typeform.com/to/Xav9RG",
    "speakers": [
      {
        "photo": {
          "description": "Guy Royse",
          "url": "https://static.pyohio.org/2019/speakers/228.jpg"
        },
        "website": "http://guyroyse.com",
        "biography_html": "<p>Guy works for DataRobot in Columbus, Ohio as a Developer Evangelist. Combining his decades of experience in writing software with a passion for sharing what he has learned, Guy goes out into developer communities and helps others build great software.</p>\n<p>Teaching and community have long been a focus for Guy. He is President of the Columbus JavaScript Users Group, an organizer for the Columbus Machine Learners, and has even has helped teach programming at a prison in central Ohio.</p>\n<p>In past lives, Guy has worked as a consultant in a broad range of industries including healthcare, retail, and utilities. He also has spent several years working for a major insurance company in central Ohio. This has given him a broad view of technology application toward business problems.</p>\n<p>In his personal life, Guy is a hard-boiled geek interested in role-playing games, science fiction, and technology. He also has a slightly less geeky interest in history and linguistics. In his spare time, he volunteers for his local Cub Scout Pack, goes camping, and studies history and linguistics.</p>\n<p>Guy lives in Ohio with his wife, his three teenage sons, and an entire wall of games.</p>",
        "name": "Guy Royse",
        "mastodon": "",
        "biography": "Guy works for DataRobot in Columbus, Ohio as a Developer Evangelist. Combining his decades of experience in writing software with a passion for sharing what he has learned, Guy goes out into developer communities and helps others build great software.\r\n\r\nTeaching and community have long been a focus for Guy. He is President of the Columbus JavaScript Users Group, an organizer for the Columbus Machine Learners, and has even has helped teach programming at a prison in central Ohio.\r\n\r\nIn past lives, Guy has worked as a consultant in a broad range of industries including healthcare, retail, and utilities. He also has spent several years working for a major insurance company in central Ohio. This has given him a broad view of technology application toward business problems.\r\n\r\nIn his personal life, Guy is a hard-boiled geek interested in role-playing games, science fiction, and technology. He also has a slightly less geeky interest in history and linguistics. In his spare time, he volunteers for his local Cub Scout Pack, goes camping, and studies history and linguistics.\r\n\r\nGuy lives in Ohio with his wife, his three teenage sons, and an entire wall of games.",
        "speaker_id": 228,
        "twitter": "guyroyse"
      }
    ],
    "abstract_html": "<p>The Vikings came from the land of ice and snow, from the midnight sun, where the hot springs flow. In addition to longships and bad attitudes, they had a system of writing that we, in modern times, have dubbed the Younger Futhark (or \u16a0\u16a2\u16a6\u16ac\u16b1\u16b4 if you're a Viking). These sigils are more commonly called runes and have been mimicked in fantasy literature and role-playing games for decades.</p>\n<p>Of course, having an alphabet, runic or otherwise, solves lots of problems. But, it also introduces others. The Vikings had the same problem we do today. How were they to get their automated software systems to recognize the hand-carved input of a typical boatman? Of course, they were never able to solve this problem and were instead forced into a life of burning and pillaging. Today, we have deep learning and neural networks and can, fortunately, avoid such a fate.</p>\n<p>When we're done, you'll understand how Convolution Neural Networks work, how to build your own using Python and Keras, and how to make it a part of an application using Flask. Maybe you'll even try seeing what it thinks of the Bluetooth logo?</p>",
    "description": "In this session, we are going to build a Convolution Neural Network to recognize hand-written runes from the Younger Futhark. We'll be using Keras to write easy to understand Python code that creates and trains the neural network to do this. We'll wire this up to a web application using Flask and some client-side JavaScript so you can write some runes yourself and see if it recognizes them.",
    "description_html": "<p>In this session, we are going to build a Convolution Neural Network to recognize hand-written runes from the Younger Futhark. We'll be using Keras to write easy to understand Python code that creates and trains the neural network to do this. We'll wire this up to a web application using Flask and some client-side JavaScript so you can write some runes yourself and see if it recognizes them.</p>",
    "kind": "45-minute Talk",
    "start_time": "2019-07-28T15:15:00"
  },
  {
    "title": "Demystifying Machine Learning",
    "youtube_url": "http://youtu.be/_UPI9KGJk2M",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-27T11:00:00",
      "start": "2019-07-27T10:30:00"
    },
    "abstract": "We\u2019ll explain basic concepts like linear algebra and loss functions, figure out when to use machine learning and build an ML model that we\u2019ll be able to use in real world apps. Here\u2019s an in-depth list of what we\u2019ll cover:\r\n\r\n* What Machine Learning is and where it\u2019s being used\r\n* How to recognize when machine learning is necessary\r\n* Math & Statistics 101\r\n* Algorithm 1: Linear Regression\r\n* Live Coding Session Salary Estimator\r\n* Q & A",
    "presentation_id": 141,
    "feedback_url": "https://pyohio.typeform.com/to/wUicjW",
    "speakers": [
      {
        "photo": {
          "description": "Nikola Novakovic",
          "url": "https://static.pyohio.org/2019/speakers/201.png"
        },
        "website": "",
        "biography_html": "<p>I'm a software engineer that got his hands on a computer when he was 9 years old. Ever since then I've fallen in love with software and building things.</p>\n<p>Currently very passionate about machine learning, APIs and start ups. In my spare time I like to train dogs, lift weights and cook.</p>",
        "name": "Nikola Novakovic",
        "mastodon": "",
        "biography": "I'm a software engineer that got his hands on a computer when he was 9 years old. Ever since then I've fallen in love with software and building things.\r\n\r\nCurrently very passionate about machine learning, APIs and start ups. In my spare time I like to train dogs, lift weights and cook.",
        "speaker_id": 201,
        "twitter": "novica93"
      }
    ],
    "abstract_html": "<p>We\u2019ll explain basic concepts like linear algebra and loss functions, figure out when to use machine learning and build an ML model that we\u2019ll be able to use in real world apps. Here\u2019s an in-depth list of what we\u2019ll cover:</p>\n<ul>\n<li>What Machine Learning is and where it\u2019s being used</li>\n<li>How to recognize when machine learning is necessary</li>\n<li>Math &amp; Statistics 101</li>\n<li>Algorithm 1: Linear Regression</li>\n<li>Live Coding Session Salary Estimator</li>\n<li>Q &amp; A</li>\n</ul>",
    "description": "Machine Learning is something you'll see referenced very frequently now in everything from marketing materials to sales pitches, and job postings. With so much hype it can be hard to distinguish what people mean when they say Machine Learning. In this talk we will demystify Machine Learning by understanding its core concepts and applying that knowledge to real world examples.",
    "description_html": "<p>Machine Learning is something you'll see referenced very frequently now in everything from marketing materials to sales pitches, and job postings. With so much hype it can be hard to distinguish what people mean when they say Machine Learning. In this talk we will demystify Machine Learning by understanding its core concepts and applying that knowledge to real world examples.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T10:30:00"
  },
  {
    "title": "Distributed Deep Neural Network Training using MPI on Python",
    "youtube_url": "http://youtu.be/FrJM2dH57jo",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-27T11:45:00",
      "start": "2019-07-27T11:15:00"
    },
    "abstract": "Deep learning models are a subset of machine learning models and algorithms which are designed to induce Artificial Intelligence in computers. The rise of deep learning can be attributed to the presence of large datasets and growing computational power. Deep learning models are used in face recognition, speech recognition, and many other applications. TensorFlow is a popular deep learning framework for python used to implement and train Deep Neural Networks (DNNs). Message Passing Interface (MPI) is a programming paradigm, often used in parallel applications, that allows processes to communicate with each other. Horovod provides an interface in python to couple DNN written using TensorFlow and MPI to train DNNs in less amount of time using the distributed training approach. MPI functions are optimized to provide multiple communication routines including point-to-point and collective communication. Point-to-point communication refers to a communication pattern that involves a sender process and a receiver process while collective communication involves a group of processes exchanging messages. In particular, the reduction is a collective function widely used in deep learning models to perform group operations. In this talk, we intend to demonstrate the challenges and elements to consider for DNN training using MPI in Python.",
    "presentation_id": 123,
    "feedback_url": "https://pyohio.typeform.com/to/UACbbR",
    "speakers": [
      {
        "photo": {
          "description": "Arpan Jain",
          "url": "https://static.pyohio.org/2019/speakers/243.png"
        },
        "website": "",
        "biography_html": "<p>A Deep Learning enthusiast working to integrate Deep Learning and High-Performance Computing.\nCurrently enrolled in the Ph.D. program of the computer science department.</p>",
        "name": "Arpan Jain",
        "mastodon": "",
        "biography": "A Deep Learning enthusiast working to integrate Deep Learning and High-Performance Computing.\r\nCurrently enrolled in the Ph.D. program of the computer science department.",
        "speaker_id": 243,
        "twitter": ""
      },
      {
        "photo": {
          "description": "Kawthar Shafie Khorassani",
          "url": "https://static.pyohio.org/2019/speakers/252.png"
        },
        "website": "",
        "biography_html": "",
        "name": "Kawthar Shafie Khorassani",
        "mastodon": "",
        "biography": "",
        "speaker_id": 252,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>Deep learning models are a subset of machine learning models and algorithms which are designed to induce Artificial Intelligence in computers. The rise of deep learning can be attributed to the presence of large datasets and growing computational power. Deep learning models are used in face recognition, speech recognition, and many other applications. TensorFlow is a popular deep learning framework for python used to implement and train Deep Neural Networks (DNNs). Message Passing Interface (MPI) is a programming paradigm, often used in parallel applications, that allows processes to communicate with each other. Horovod provides an interface in python to couple DNN written using TensorFlow and MPI to train DNNs in less amount of time using the distributed training approach. MPI functions are optimized to provide multiple communication routines including point-to-point and collective communication. Point-to-point communication refers to a communication pattern that involves a sender process and a receiver process while collective communication involves a group of processes exchanging messages. In particular, the reduction is a collective function widely used in deep learning models to perform group operations. In this talk, we intend to demonstrate the challenges and elements to consider for DNN training using MPI in Python.</p>",
    "description": "Deep Learning(DL) has attracted a lot of attention in recent years, and python has been the front runner language when it comes to the framework and implementation. Training of DL models remains a challenge as it requires a huge amount of time and computational resources. We will discuss the distributed training of the Deep Neural Network using the MPI across multiple GPUs or CPUs.",
    "description_html": "<p>Deep Learning(DL) has attracted a lot of attention in recent years, and python has been the front runner language when it comes to the framework and implementation. Training of DL models remains a challenge as it requires a huge amount of time and computational resources. We will discuss the distributed training of the Deep Neural Network using the MPI across multiple GPUs or CPUs.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T11:15:00"
  },
  {
    "title": "Django in Production with PEX",
    "youtube_url": "http://youtu.be/abnwINA50DE",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-27T15:30:00",
      "start": "2019-07-27T15:00:00"
    },
    "abstract": "This talk discusses deploying and running Django web applications in production using Twitter PEX. PEX can be used to package a Python application and it's dependencies into a single file that can be easily copied to and run on other machines. The PEX format has some limitations and this talk will explore one possible way to use it for distributing Django web applications.\r\n\r\n- Introduction (2m)\r\n- Overview of Twitter PEX (3m)\r\n- Django Management Commands (5m)\r\n  - Gunicorn Web Server\r\n  - Celery Task Worker\r\n- Entry Point Script (5m)\r\n- Creating the Distribution (5m)\r\n- Deploying the Distribution (5m)\r\n- Running the Application (5m)\r\n- Q&A",
    "presentation_id": 128,
    "feedback_url": "https://pyohio.typeform.com/to/rWuG4L",
    "speakers": [
      {
        "photo": {
          "description": "Alexandru Barbur",
          "url": "https://static.pyohio.org/2019/speakers/71.jpg"
        },
        "website": "",
        "biography_html": "<p>Software / DevOps Engineer with over 8 years of experience in the field. My preferred environment is the backend but I'm a generalist and familiar with the entire stack. Languages I know well include Python, C, C++, and Go (although my spirit language has always been Lua). If it's software or hardware I have probably heard of it and likely worked with it.</p>",
        "name": "Alexandru Barbur",
        "mastodon": "",
        "biography": "Software / DevOps Engineer with over 8 years of experience in the field. My preferred environment is the backend but I'm a generalist and familiar with the entire stack. Languages I know well include Python, C, C++, and Go (although my spirit language has always been Lua). If it's software or hardware I have probably heard of it and likely worked with it.",
        "speaker_id": 71,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>This talk discusses deploying and running Django web applications in production using Twitter PEX. PEX can be used to package a Python application and it's dependencies into a single file that can be easily copied to and run on other machines. The PEX format has some limitations and this talk will explore one possible way to use it for distributing Django web applications.</p>\n<ul>\n<li>Introduction (2m)</li>\n<li>Overview of Twitter PEX (3m)</li>\n<li>Django Management Commands (5m)</li>\n<li>Gunicorn Web Server</li>\n<li>Celery Task Worker</li>\n<li>Entry Point Script (5m)</li>\n<li>Creating the Distribution (5m)</li>\n<li>Deploying the Distribution (5m)</li>\n<li>Running the Application (5m)</li>\n<li>Q&amp;A</li>\n</ul>",
    "description": "This talk discusses deploying and running Django web applications in production using Twitter PEX.",
    "description_html": "<p>This talk discusses deploying and running Django web applications in production using Twitter PEX.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T15:00:00"
  },
  {
    "title": "Docker-Composing Your Way to a Better Development Environment",
    "youtube_url": "http://youtu.be/p1CQa0kvAq8",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-27T15:30:00",
      "start": "2019-07-27T15:00:00"
    },
    "abstract": "By the end of this talk, audience members will understand the following concepts:\r\n\r\n- Running application services/dependencies inside containers and its advantages and disadvantages. \r\n- Defining application environment and services via Dockerfile, docker-compose.yml configuration files.\r\n- Managing the environment using the `docker-compose` CLI.\r\n\r\nTo illustrate these concepts, a Django application will be configured to use a database, a cache, a queue and task worker.",
    "presentation_id": 85,
    "feedback_url": "https://pyohio.typeform.com/to/JyfC8z",
    "speakers": [
      {
        "photo": {
          "description": "Ricardo Solano",
          "url": "https://static.pyohio.org/2019/speakers/257.png"
        },
        "website": "",
        "biography_html": "<p>Ricardo is passionate about creating things with software since he was a kid. He is now a software engineer based in Cleveland with 10+ year's experience. When he is not working you can find him playing soccer or participating in Cleveland's coding community events.</p>",
        "name": "Ricardo Solano",
        "mastodon": "",
        "biography": "Ricardo is passionate about creating things with software since he was a kid. He is now a software engineer based in Cleveland with 10+ year's experience. When he is not working you can find him playing soccer or participating in Cleveland's coding community events.",
        "speaker_id": 257,
        "twitter": "ricardosolano"
      }
    ],
    "abstract_html": "<p>By the end of this talk, audience members will understand the following concepts:</p>\n<ul>\n<li>Running application services/dependencies inside containers and its advantages and disadvantages. </li>\n<li>Defining application environment and services via Dockerfile, docker-compose.yml configuration files.</li>\n<li>Managing the environment using the <code>docker-compose</code> CLI.</li>\n</ul>\n<p>To illustrate these concepts, a Django application will be configured to use a database, a cache, a queue and task worker.</p>",
    "description": "Development environments can become cumbersome over time, with setup occasionally filling multiple pages of documentation and making onboarding new team members a difficult task. Whether you deploy your Python application using containers or not, Docker Compose is a great tool for defining development environments that closely mirror production and can be spun up with a single command.",
    "description_html": "<p>Development environments can become cumbersome over time, with setup occasionally filling multiple pages of documentation and making onboarding new team members a difficult task. Whether you deploy your Python application using containers or not, Docker Compose is a great tool for defining development environments that closely mirror production and can be spun up with a single command.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T15:00:00"
  },
  {
    "title": "Dynamic Data Pipelining with Luigi",
    "youtube_url": "http://youtu.be/5kSnkNDeQjQ",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-28T16:45:00",
      "start": "2019-07-28T16:15:00"
    },
    "abstract": "As the scale of modern data has grown, so too has the need for modern tooling to handle its growing list of needs. Databases have had to become more horizontally scalable, less centralized, and more fault tolerant to handle the expectations of modern users. As such, the concept of data-warehouses and data-engineering are relatively new concepts, and engineers are still hard at work to solve core problems of this new sector. One problem of particular interest is that of dynamic data pipelining and workflows. Ingesting large amounts of data, transforming streams dynamically into a standardized format, and maintaining checkpoints and dependencies in order to ensure that proper prerequisites are met before beginning a given task are all difficult problems. This talk will describe how these problems can be solved using Luigi, Spotify\u2019s robust tool for constructing complex data pipelines and workflows.\r\n\r\nLuigi allows for complex pipelines to be described programmatically, handling multiple dependencies and dependents. This allows it to be used for a wide variety of batch jobs, and the option to use the centralized scheduler makes it easy to monitor job progress across data warehouses. In addition, Luigi\u2019s robust checkpoint system allows for pipelines to resumed at any point they may fail at. Each task is well-defined, specifying required inputs and resulting outputs, so creating or editing pipelines is a breeze.",
    "presentation_id": 93,
    "feedback_url": "https://pyohio.typeform.com/to/HgQlJR",
    "speakers": [
      {
        "photo": {
          "description": "Trey Hakanson",
          "url": "https://static.pyohio.org/2019/speakers/246.jpg"
        },
        "website": "",
        "biography_html": "<p>Trey Hakanson is a full-stack web and mobile developer in Columbus, OH. He recently graduated from The Ohio State University with honors in engineering, and has spent time at fortune 500 companies such as Amazon in addition to being heavily involved in the Ohio startup community. He has won multiple hackathons in the Ohio area, as well as having participated in the Brandery Accelerator in Cincinnati. He is currently the lead engineer at Mobikit.</p>",
        "name": "Trey Hakanson",
        "mastodon": "",
        "biography": "Trey Hakanson is a full-stack web and mobile developer in Columbus, OH. He recently graduated from The Ohio State University with honors in engineering, and has spent time at fortune 500 companies such as Amazon in addition to being heavily involved in the Ohio startup community. He has won multiple hackathons in the Ohio area, as well as having participated in the Brandery Accelerator in Cincinnati. He is currently the lead engineer at Mobikit.",
        "speaker_id": 246,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>As the scale of modern data has grown, so too has the need for modern tooling to handle its growing list of needs. Databases have had to become more horizontally scalable, less centralized, and more fault tolerant to handle the expectations of modern users. As such, the concept of data-warehouses and data-engineering are relatively new concepts, and engineers are still hard at work to solve core problems of this new sector. One problem of particular interest is that of dynamic data pipelining and workflows. Ingesting large amounts of data, transforming streams dynamically into a standardized format, and maintaining checkpoints and dependencies in order to ensure that proper prerequisites are met before beginning a given task are all difficult problems. This talk will describe how these problems can be solved using Luigi, Spotify\u2019s robust tool for constructing complex data pipelines and workflows.</p>\n<p>Luigi allows for complex pipelines to be described programmatically, handling multiple dependencies and dependents. This allows it to be used for a wide variety of batch jobs, and the option to use the centralized scheduler makes it easy to monitor job progress across data warehouses. In addition, Luigi\u2019s robust checkpoint system allows for pipelines to resumed at any point they may fail at. Each task is well-defined, specifying required inputs and resulting outputs, so creating or editing pipelines is a breeze.</p>",
    "description": "As the scale of modern data has grown, so has the need for tooling to handle its growing list of challenges. Whether performing reporting, bulk ingestion, or ETL processes, it is important to maintain flexibility and ensure proper monitoring. Luigi provides a robust toolkit to perform a wide variety of data pipelining tasks, and can be easily integrated into existing workflows with ease.",
    "description_html": "<p>As the scale of modern data has grown, so has the need for tooling to handle its growing list of challenges. Whether performing reporting, bulk ingestion, or ETL processes, it is important to maintain flexibility and ensure proper monitoring. Luigi provides a robust toolkit to perform a wide variety of data pipelining tasks, and can be easily integrated into existing workflows with ease.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T16:15:00"
  },
  {
    "title": "Explicit is Better than Implicit: Making Culture Visible with Team Charters",
    "youtube_url": "http://youtu.be/fEr3XwhFwPA",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-27T12:30:00",
      "start": "2019-07-27T12:00:00"
    },
    "abstract": "*Beautiful is better than ugly.* There is more to a team than just throwing people together and telling them to ship code. The culture of the team matters, Not company culture, but the culture and operating rules of the group of people that spend their days together. That culture can be amazing when it is mindfully considered. So how does that happen?\r\n\r\n*Explicit is better than implicit.* A team charter is documentation written by a group of people to capture their purpose, their values, their working rules, and their general processes.  Making the invisible visible is the purpose of the team charter.\r\n\r\n*There should be one-- and preferably only one --obvious way to do it.* Your team charter will provide an anchor to keep your team true to their ideals, even and **especially** during periods of great stress by providing a written record of how they aspire to work together.\r\n\r\n*In the face of ambiguity, refuse the temptation to guess.* Whether it is establishing priorities or onboarding new team members, your team charter will take the guesswork out of the non-code parts of working together. \r\n\r\nIn this talk, we'll explore what a team charter is, how to create one, and view examples of charters teams have created and used in their day-to-day work.",
    "presentation_id": 132,
    "feedback_url": "https://pyohio.typeform.com/to/w9W85V",
    "speakers": [
      {
        "photo": {
          "description": "Christopher T. Miller",
          "url": "https://static.pyohio.org/2019/speakers/211.jpg"
        },
        "website": "",
        "biography_html": "<p>Chris Miller has been writing code on the internet since 1995. He's spent the last thirteen years managing and mentoring software teams. He is an interactive fiction enthusiast, roasts his own coffee, brews his own mead, plays D&amp;D, and occasionally writes a blog post.  He has not yet been eaten by a grue. https://ctmiller.net.</p>",
        "name": "Christopher T. Miller",
        "mastodon": "",
        "biography": "Chris Miller has been writing code on the internet since 1995. He's spent the last thirteen years managing and mentoring software teams. He is an interactive fiction enthusiast, roasts his own coffee, brews his own mead, plays D&D, and occasionally writes a blog post.  He has not yet been eaten by a grue. https://ctmiller.net.",
        "speaker_id": 211,
        "twitter": "grueproof"
      }
    ],
    "abstract_html": "<p><em>Beautiful is better than ugly.</em> There is more to a team than just throwing people together and telling them to ship code. The culture of the team matters, Not company culture, but the culture and operating rules of the group of people that spend their days together. That culture can be amazing when it is mindfully considered. So how does that happen?</p>\n<p><em>Explicit is better than implicit.</em> A team charter is documentation written by a group of people to capture their purpose, their values, their working rules, and their general processes.  Making the invisible visible is the purpose of the team charter.</p>\n<p><em>There should be one-- and preferably only one --obvious way to do it.</em> Your team charter will provide an anchor to keep your team true to their ideals, even and <strong>especially</strong> during periods of great stress by providing a written record of how they aspire to work together.</p>\n<p><em>In the face of ambiguity, refuse the temptation to guess.</em> Whether it is establishing priorities or onboarding new team members, your team charter will take the guesswork out of the non-code parts of working together. </p>\n<p>In this talk, we'll explore what a team charter is, how to create one, and view examples of charters teams have created and used in their day-to-day work.</p>",
    "description": "If you\u2019ve ever joined a new team, you know that there are hidden rules for how the team operates: what they value in their day-today work, what is important to them. \r\n\r\nBreaking news: teams are hard. We document our code... shouldn't we document our team's values and ideals?",
    "description_html": "<p>If you\u2019ve ever joined a new team, you know that there are hidden rules for how the team operates: what they value in their day-today work, what is important to them. </p>\n<p>Breaking news: teams are hard. We document our code... shouldn't we document our team's values and ideals?</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T12:00:00"
  },
  {
    "title": "Feature Engineering: An Apprentice\u2019s Guide to the \u201cDark Art\u201d of Machine Learning",
    "youtube_url": "http://youtu.be/LUZGlS07YiY",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-27T11:45:00",
      "start": "2019-07-27T11:15:00"
    },
    "abstract": "What is feature engineering and why do we need it?  When is it applied? Is it an art or a science? Find out the answers to these questions and more as we explore different methods of feature engineering with practical examples provided. There are three main methods of feature engineering: adjusting raw features, combining raw features and decomposing raw features into usable subsets. We will use datasets to illustrate binning, encoding, binaries, summing, differencing, feature scaling, extraction, and the manipulation of date/time features.  Finally, we will explore the performance of a machine learning model before and after feature engineering is applied. As a postscript, current automated feature engineering tools for Python will be introduced.",
    "presentation_id": 91,
    "feedback_url": "https://pyohio.typeform.com/to/B5hj6T",
    "speakers": [
      {
        "photo": {
          "description": "Deborah Diller Harris",
          "url": "https://static.pyohio.org/2019/speakers/199.JPG"
        },
        "website": "",
        "biography_html": "<p>Deborah Diller Harris is a M.S. graduate student in Data Science at Elmhurst College (IL). Harris is a serial entrepreneur who is augmenting her business knowledge with Python skills. Her new career in data science will enable her to meld her business experience with the latest in technology. She is also the Founder of FemDataScience whose mission is to educate, encourage and elevate women in Big Data. She is the Organizer of the TampaBay PyLadies chapter, a former Assistant-Organizer of Chicago PyLadies and in 2018 started the Python Club at Elmhurst College. In addition, she volunteers her time to the Python Software Foundation by serving on several committees. www.femdatascience.com</p>",
        "name": "Deborah Diller Harris",
        "mastodon": "",
        "biography": "Deborah Diller Harris is a M.S. graduate student in Data Science at Elmhurst College (IL). Harris is a serial entrepreneur who is augmenting her business knowledge with Python skills. Her new career in data science will enable her to meld her business experience with the latest in technology. She is also the Founder of FemDataScience whose mission is to educate, encourage and elevate women in Big Data. She is the Organizer of the TampaBay PyLadies chapter, a former Assistant-Organizer of Chicago PyLadies and in 2018 started the Python Club at Elmhurst College. In addition, she volunteers her time to the Python Software Foundation by serving on several committees. www.femdatascience.com",
        "speaker_id": 199,
        "twitter": "femdatascience"
      }
    ],
    "abstract_html": "<p>What is feature engineering and why do we need it?  When is it applied? Is it an art or a science? Find out the answers to these questions and more as we explore different methods of feature engineering with practical examples provided. There are three main methods of feature engineering: adjusting raw features, combining raw features and decomposing raw features into usable subsets. We will use datasets to illustrate binning, encoding, binaries, summing, differencing, feature scaling, extraction, and the manipulation of date/time features.  Finally, we will explore the performance of a machine learning model before and after feature engineering is applied. As a postscript, current automated feature engineering tools for Python will be introduced.</p>",
    "description": "Why is feature engineering considered the \"dark art\" of machine learning? Transforming raw data into a form that your machine learning algorithm can utilize seems mysterious and downright frightening! Bring your wizard hat and join me as this machine learning apprentice shares her personal book of feature engineering incantations.",
    "description_html": "<p>Why is feature engineering considered the \"dark art\" of machine learning? Transforming raw data into a form that your machine learning algorithm can utilize seems mysterious and downright frightening! Bring your wizard hat and join me as this machine learning apprentice shares her personal book of feature engineering incantations.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T11:15:00"
  },
  {
    "title": "Find Your Feature Fit: How to Pick a Text Editor for Python Programming",
    "youtube_url": "http://youtu.be/f0nGupo08Fk",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-27T16:15:00",
      "start": "2019-07-27T15:45:00"
    },
    "abstract": "This presentation will explore the different features of text editors for\r\nPython programming. By comparing the capabilities of VS Code and Vim, audiences\r\nof all skill levels will receive the necessary information to make an informed\r\ndecision about which text editor fits their programming preferences. Using the\r\nillustrative example of a Python programmer who is implementing a Python\r\nprogram, the talk will introduce and compare features including fuzzy file\r\nfinding and code navigation, auto-completion, source code highlighting,\r\nlinting, testing, virtual environments, and snippets. For VS Code and Vim,\r\nthese selected features showcase what is often important to a Python\r\nprogrammer, highlighting the trade-offs and benefits of both text editors. Here\r\nare some topics that we will cover in this presentation:\r\n\r\n- **Fuzzy File Finding**: Rapidly search for files in your project with names\r\n  that match a pattern.\r\n\r\n- **Source Code Highlighting**: Bring clarity by applying colors and fonts to\r\n  your source code and technical writing.\r\n\r\n- **Autocompletion**: Save time by quickly substituting partial code and text\r\n  segments with the desired content.\r\n\r\n- **Linting and Code Formatting**: Check and reformat source code and writing to\r\n  ensure adherence to well-established style guides.\r\n\r\n- **Virtual Environments and Packages**: Maintain project isolation by\r\n  installing and managing packages in separate development and execution\r\n  environments.\r\n\r\n- **Automated Testing and Debugging**: Establish a confidence in program\r\n  correctness by running test suites and finding and fixing bugs.\r\n\r\n- **Code Snippets**: Save time when programming and testing by inserting full\r\n  segments based on easy-to-complete keywords.\r\n\r\nUltimately, this presentation will demonstrate that both VS Code and Vim are\r\noutstanding text editors for Python, with features that can assist in many\r\neveryday programming tasks. In different ways, and possibly with different\r\ndisadvantages or benefits, these text editors improve a programmer's efficiency\r\nand effectiveness, becoming an indispensable part of an everyday workflow. With\r\nthe knowledge of the features that VS Code and Vim offer, the audience will be\r\nable to choose which editor is best for them, emerging with the know-how to\r\nconfigure it to their preferences for Python programming. Both beginners and\r\nexperts alike will be capable of finding their \"feature fit\" for a text editor\r\nthat supports Python programming!",
    "presentation_id": 120,
    "feedback_url": "https://pyohio.typeform.com/to/ZQWwCo",
    "speakers": [
      {
        "photo": {
          "description": "Gregory M. Kapfhammer",
          "url": "https://static.pyohio.org/2019/speakers/149.jpg"
        },
        "website": "https://www.gregorykapfhammer.com/",
        "biography_html": "<p>As an Associate Professor of Computer Science at Allegheny College, Gregory M.\nKapfhammer enables students to understand and create innovative software. By\npartnering with well-known technology companies and both creating and adopting\nopen-source software, Kapfhammer designs and delivers interdisciplinary courses.\n<br><br>\nEmphasizing the importance of oral and written communication and teamwork,\nGregory Kapfhammer teaches undergraduate courses in areas such as data management,\nsoftware engineering, and web development, releasing his course materials\nthrough GitHub repositories and mobile-ready web sites. An award winning\nresearcher, he involves students in projects leading to the publication of\npapers and the release of software tools and data sets.\n<br> <br>\nGregory Kapfhammer sees the success of his students as his greatest achievement. They have secured positions at top technology companies such as Amazon, Dell, Facebook, Google, Intel, Microsoft, Tumblr, and numerous startups. Many of Kapfhammer's students have also prospered in academia, receiving prestigious research fellowships and paper awards.\n<br><br>\nInterested in learning more about Gregory Kapfhammer? You can visit his <a href=\"https://www.gregorykapfhammer.com/\">web\nsite</a> to access his teaching and\nresearch materials and read his blog or you can check out his <a href=\"https://github.com/gkapfham\">GitHub\nprofile</a> to use his open-source software!</p>",
        "name": "Gregory M. Kapfhammer",
        "mastodon": "",
        "biography": "As an Associate Professor of Computer Science at Allegheny College, Gregory M.\r\nKapfhammer enables students to understand and create innovative software. By\r\npartnering with well-known technology companies and both creating and adopting\r\nopen-source software, Kapfhammer designs and delivers interdisciplinary courses.\r\n<br><br>\r\nEmphasizing the importance of oral and written communication and teamwork,\r\nGregory Kapfhammer teaches undergraduate courses in areas such as data management,\r\nsoftware engineering, and web development, releasing his course materials\r\nthrough GitHub repositories and mobile-ready web sites. An award winning\r\nresearcher, he involves students in projects leading to the publication of\r\npapers and the release of software tools and data sets.\r\n<br> <br>\r\nGregory Kapfhammer sees the success of his students as his greatest achievement. They have secured positions at top technology companies such as Amazon, Dell, Facebook, Google, Intel, Microsoft, Tumblr, and numerous startups. Many of Kapfhammer's students have also prospered in academia, receiving prestigious research fellowships and paper awards.\r\n<br><br>\r\nInterested in learning more about Gregory Kapfhammer? You can visit his [web\r\nsite](https://www.gregorykapfhammer.com/) to access his teaching and\r\nresearch materials and read his blog or you can check out his [GitHub\r\nprofile](https://github.com/gkapfham) to use his open-source software!",
        "speaker_id": 149,
        "twitter": "GregKapfhammer"
      },
      {
        "photo": {
          "description": "Madelyn M. Kapfhammer",
          "url": "https://static.pyohio.org/2019/speakers/249.png"
        },
        "website": "https://www.madelynkapfhammer.com/",
        "biography_html": "<p>Madelyn is a sophomore at Dickinson College, where she is combining her interests in both biology and computer science. She began typing away at her computer several years ago, and since then her passion for programming and interest in bioinformatics have increased significantly. Her time staring at laptop screens has only grown as she has learned various programming languages and coding methods. When not squinting at screens, Madelyn enjoys reading a good dystopian novel, spending time with her family, or volunteering at her local coffee shop.</p>",
        "name": "Madelyn M. Kapfhammer",
        "mastodon": "",
        "biography": "Madelyn is a sophomore at Dickinson College, where she is combining her interests in both biology and computer science. She began typing away at her computer several years ago, and since then her passion for programming and interest in bioinformatics have increased significantly. Her time staring at laptop screens has only grown as she has learned various programming languages and coding methods. When not squinting at screens, Madelyn enjoys reading a good dystopian novel, spending time with her family, or volunteering at her local coffee shop.",
        "speaker_id": 249,
        "twitter": "MaddyKapfhammer"
      }
    ],
    "abstract_html": "<p>This presentation will explore the different features of text editors for\nPython programming. By comparing the capabilities of VS Code and Vim, audiences\nof all skill levels will receive the necessary information to make an informed\ndecision about which text editor fits their programming preferences. Using the\nillustrative example of a Python programmer who is implementing a Python\nprogram, the talk will introduce and compare features including fuzzy file\nfinding and code navigation, auto-completion, source code highlighting,\nlinting, testing, virtual environments, and snippets. For VS Code and Vim,\nthese selected features showcase what is often important to a Python\nprogrammer, highlighting the trade-offs and benefits of both text editors. Here\nare some topics that we will cover in this presentation:</p>\n<ul>\n<li>\n<p><strong>Fuzzy File Finding</strong>: Rapidly search for files in your project with names\n  that match a pattern.</p>\n</li>\n<li>\n<p><strong>Source Code Highlighting</strong>: Bring clarity by applying colors and fonts to\n  your source code and technical writing.</p>\n</li>\n<li>\n<p><strong>Autocompletion</strong>: Save time by quickly substituting partial code and text\n  segments with the desired content.</p>\n</li>\n<li>\n<p><strong>Linting and Code Formatting</strong>: Check and reformat source code and writing to\n  ensure adherence to well-established style guides.</p>\n</li>\n<li>\n<p><strong>Virtual Environments and Packages</strong>: Maintain project isolation by\n  installing and managing packages in separate development and execution\n  environments.</p>\n</li>\n<li>\n<p><strong>Automated Testing and Debugging</strong>: Establish a confidence in program\n  correctness by running test suites and finding and fixing bugs.</p>\n</li>\n<li>\n<p><strong>Code Snippets</strong>: Save time when programming and testing by inserting full\n  segments based on easy-to-complete keywords.</p>\n</li>\n</ul>\n<p>Ultimately, this presentation will demonstrate that both VS Code and Vim are\noutstanding text editors for Python, with features that can assist in many\neveryday programming tasks. In different ways, and possibly with different\ndisadvantages or benefits, these text editors improve a programmer's efficiency\nand effectiveness, becoming an indispensable part of an everyday workflow. With\nthe knowledge of the features that VS Code and Vim offer, the audience will be\nable to choose which editor is best for them, emerging with the know-how to\nconfigure it to their preferences for Python programming. Both beginners and\nexperts alike will be capable of finding their \"feature fit\" for a text editor\nthat supports Python programming!</p>",
    "description": "What is important to you when it comes to text editors? To find out, join us in comparing VS Code and Vim. From version control integration to source code highlighting, with auto-completion, testing, virtual environments, snippets, code navigation and linting in between, learn how VS Code and Vim handle each feature and decide for yourself what fits your programming preferences when using Python.",
    "description_html": "<p>What is important to you when it comes to text editors? To find out, join us in comparing VS Code and Vim. From version control integration to source code highlighting, with auto-completion, testing, virtual environments, snippets, code navigation and linting in between, learn how VS Code and Vim handle each feature and decide for yourself what fits your programming preferences when using Python.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T15:45:00"
  },
  {
    "title": "Gathering Insights from Audio Data",
    "youtube_url": "http://youtu.be/cjsZtZJ-YPo",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-28T16:00:00",
      "start": "2019-07-28T15:15:00"
    },
    "abstract": "We\u2019ll go over the different types of audio formats and how format and type of audio plays a role in the quality of the outcome. We\u2019ll go over different transcription options available today and provide a demo of converting audio data into text. We\u2019ll review ways of storing and searching text data at scale using open source tools and Natural Language Processing (NLP) techniques. Going further we\u2019ll explore different techniques for building machine learning models on the transcribed text data. You\u2019ll leave this session with a firm understanding of how to take audio data and convert it into actionable insights.",
    "presentation_id": 127,
    "feedback_url": "https://pyohio.typeform.com/to/ipOkbb",
    "speakers": [
      {
        "photo": {
          "description": "Ryan Bales",
          "url": "https://static.pyohio.org/2019/speakers/193.jpg"
        },
        "website": "",
        "biography_html": "<p>Ryan Bales is the Director of Analytics Engineering at DialogTech. He\u2019s an active member of the Cleveland technology community, CLE Data Science and R Meetup groups. Ryan is a content contributor and class facilitator for the Python Data Science course track at DriveIT. When not writing code or trying to learn more about data science you can find Ryan trying to not lose at online video games. Ryan lives in Cleveland, Ohio.</p>",
        "name": "Ryan Bales",
        "mastodon": "",
        "biography": "Ryan Bales is the Director of Analytics Engineering at DialogTech. He\u2019s an active member of the Cleveland technology community, CLE Data Science and R Meetup groups. Ryan is a content contributor and class facilitator for the Python Data Science course track at DriveIT. When not writing code or trying to learn more about data science you can find Ryan trying to not lose at online video games. Ryan lives in Cleveland, Ohio.",
        "speaker_id": 193,
        "twitter": "ryanbales"
      }
    ],
    "abstract_html": "<p>We\u2019ll go over the different types of audio formats and how format and type of audio plays a role in the quality of the outcome. We\u2019ll go over different transcription options available today and provide a demo of converting audio data into text. We\u2019ll review ways of storing and searching text data at scale using open source tools and Natural Language Processing (NLP) techniques. Going further we\u2019ll explore different techniques for building machine learning models on the transcribed text data. You\u2019ll leave this session with a firm understanding of how to take audio data and convert it into actionable insights.</p>",
    "description": "Data comes in many shapes and sizes. In this session, we\u2019ll look into the process of converting audio files into valuable data.",
    "description_html": "<p>Data comes in many shapes and sizes. In this session, we\u2019ll look into the process of converting audio files into valuable data.</p>",
    "kind": "45-minute Talk",
    "start_time": "2019-07-28T15:15:00"
  },
  {
    "title": "gRPC and What, Why, How?",
    "youtube_url": "http://youtu.be/Kqjf4XgT7xU",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-28T13:15:00",
      "start": "2019-07-28T12:45:00"
    },
    "abstract": "# gRPC and what, why, how?\r\n\r\nIn this talk, we will be covering the following topics:\r\n\r\n- **What is gRPC?** We will be talking about serialization and what RPC is in general. We will quickly skim over the history of previous similar protocols for example: SOAP and CORBA. We will be talking about the problem space these protocols tried to resolve and why it slowly lost popularity.\r\n\r\n    We will be giving a quick overview of RESTful services and what has been done so far to support RESTful services.\r\n\r\n    We will look into the history of gRPC and how it came to be.\r\n\r\n- **Why use gRPC?** With a segway from the first topic we will be looking into what gRPC is doing differently than the previous generation RPC solutions and pros/cons against using REST.\r\n\r\n- **How can we use gRPC with Python?** Will showcase via live coding(or code samples for backup) the creation of a 'Hello World' application. We will write a simple proto file, generate code from it and start it as a service and query the service using an open source tool. We will also demonstrate how quick someone might create a client for the gRPC service.\r\n\r\n- **Production Considerations:** We will go over the most important considerations when deciding to use gRPC in production. Such as build tooling, testing, deployment and load management considerations.\r\n\r\n- **Q&A:** Time allowing will open the floor to questions that people might have",
    "presentation_id": 121,
    "feedback_url": "https://pyohio.typeform.com/to/rZ493E",
    "speakers": [
      {
        "photo": {
          "description": "John Roach",
          "url": "https://static.pyohio.org/2019/speakers/247.jpg"
        },
        "website": "https://johnroach.io",
        "biography_html": "<p>A site reliability engineer at Zapier. I love working on a wide range of topics but my favorites are software/system architecture, release engineering, and DevOps.</p>",
        "name": "John Roach",
        "mastodon": "",
        "biography": "A site reliability engineer at Zapier. I love working on a wide range of topics but my favorites are software/system architecture, release engineering, and DevOps.",
        "speaker_id": 247,
        "twitter": "johnroach"
      }
    ],
    "abstract_html": "<h1>gRPC and what, why, how?</h1>\n<p>In this talk, we will be covering the following topics:</p>\n<ul>\n<li>\n<p><strong>What is gRPC?</strong> We will be talking about serialization and what RPC is in general. We will quickly skim over the history of previous similar protocols for example: SOAP and CORBA. We will be talking about the problem space these protocols tried to resolve and why it slowly lost popularity.</p>\n<p>We will be giving a quick overview of RESTful services and what has been done so far to support RESTful services.</p>\n<p>We will look into the history of gRPC and how it came to be.</p>\n</li>\n<li>\n<p><strong>Why use gRPC?</strong> With a segway from the first topic we will be looking into what gRPC is doing differently than the previous generation RPC solutions and pros/cons against using REST.</p>\n</li>\n<li>\n<p><strong>How can we use gRPC with Python?</strong> Will showcase via live coding(or code samples for backup) the creation of a 'Hello World' application. We will write a simple proto file, generate code from it and start it as a service and query the service using an open source tool. We will also demonstrate how quick someone might create a client for the gRPC service.</p>\n</li>\n<li>\n<p><strong>Production Considerations:</strong> We will go over the most important considerations when deciding to use gRPC in production. Such as build tooling, testing, deployment and load management considerations.</p>\n</li>\n<li>\n<p><strong>Q&amp;A:</strong> Time allowing will open the floor to questions that people might have</p>\n</li>\n</ul>",
    "description": "You might have overheard yet another acronym \"gRPC\" getting thrown when talking about a replacement of REST or when mentioning microservices. In this talk, we will be looking into what gRPC is, the reasons why you would use it, how you would use it with Python and talk about considerations for running gRPC services in production.",
    "description_html": "<p>You might have overheard yet another acronym \"gRPC\" getting thrown when talking about a replacement of REST or when mentioning microservices. In this talk, we will be looking into what gRPC is, the reasons why you would use it, how you would use it with Python and talk about considerations for running gRPC services in production.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T12:45:00"
  },
  {
    "title": "How to Write Pytest Plugins",
    "youtube_url": "http://youtu.be/44XOyDNl8OA",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-27T12:30:00",
      "start": "2019-07-27T12:00:00"
    },
    "abstract": "Pytest is a widely-used, full-featured Python testing tool that helps you write better programs.  Whether you have been using Pytest for years or are just getting started, you may find features of Pytest that you would like to modify or customize for your own environment or specific use cases.  Did you know that you can easily enhance and customize Pytest through the use of plugins?  In this talk, you will learn all about some of the useful Pytest plugins that are available, and learn how to create your own plugins.  We will walk through the plugin creation process by creating a plugin to upload Pytest reports to a Google Cloud Storage bucket.",
    "presentation_id": 104,
    "feedback_url": "https://pyohio.typeform.com/to/o8uaio",
    "speakers": [
      {
        "photo": {
          "description": "Darlene Wong",
          "url": "https://static.pyohio.org/2019/speakers/264.jpg"
        },
        "website": "",
        "biography_html": "<p>Darlene Wong is a Silicon Valley native, currently working as a Senior Staff Engineer at Palo Alto Networks.  In the past, she worked on engineering velocity tools at Tango, security tools at Juniper, data engineering at NearbyNow, and developer productivity tools at Cisco.  She loves coding and teaching others to code, from young students in Girls Who Code clubs to adults at a local community college.  Darlene holds an MS in Computer Engineering from Santa Clara University and a BS in Computer Science from UCLA.  In her spare time, she organizes workshops and events for Family Supportive Housing, a local homeless shelter.  She enjoys dance, cooking, and travel.</p>",
        "name": "Darlene Wong",
        "mastodon": "",
        "biography": "Darlene Wong is a Silicon Valley native, currently working as a Senior Staff Engineer at Palo Alto Networks.  In the past, she worked on engineering velocity tools at Tango, security tools at Juniper, data engineering at NearbyNow, and developer productivity tools at Cisco.  She loves coding and teaching others to code, from young students in Girls Who Code clubs to adults at a local community college.  Darlene holds an MS in Computer Engineering from Santa Clara University and a BS in Computer Science from UCLA.  In her spare time, she organizes workshops and events for Family Supportive Housing, a local homeless shelter.  She enjoys dance, cooking, and travel.",
        "speaker_id": 264,
        "twitter": "__darlenewong__"
      }
    ],
    "abstract_html": "<p>Pytest is a widely-used, full-featured Python testing tool that helps you write better programs.  Whether you have been using Pytest for years or are just getting started, you may find features of Pytest that you would like to modify or customize for your own environment or specific use cases.  Did you know that you can easily enhance and customize Pytest through the use of plugins?  In this talk, you will learn all about some of the useful Pytest plugins that are available, and learn how to create your own plugins.  We will walk through the plugin creation process by creating a plugin to upload Pytest reports to a Google Cloud Storage bucket.</p>",
    "description": "Pytest is a widely-used, full-featured Python testing tool that helps you write better programs.  Did you know that you can easily enhance and customize Pytest through the use of plugins?  In this talk, you will learn all about some of the useful Pytest plugins that are available, and learn how to create your own plugins.",
    "description_html": "<p>Pytest is a widely-used, full-featured Python testing tool that helps you write better programs.  Did you know that you can easily enhance and customize Pytest through the use of plugins?  In this talk, you will learn all about some of the useful Pytest plugins that are available, and learn how to create your own plugins.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T12:00:00"
  },
  {
    "title": "If Statements are a Code Smell",
    "youtube_url": "http://youtu.be/Gxfvef2OUcg",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-27T15:30:00",
      "start": "2019-07-27T15:00:00"
    },
    "abstract": "Writing software is about making trade-offs between getting things done and doing them right. Time constraints often force us to take shortcuts to handle slight variations resulting in patches of conditional logic sprinkled throughout our codebase. Workarounds that once allowed us to move quickly now hinder our progress in getting new features out to customers. It doesn't have to be this way!\r\n\r\nThis talk will demonstrate how to use Object-Oriented programming patterns, specifically polymorphism, to handle conditional logic resulting in code that is easy to modify. The material will be presented in the context of a real-world code refactor for an open-source project. We will examine the initial solution, discuss its limitations, and walk through the process of refactoring nested `if` blocks into polymorphic classes.\r\n\r\nThe session is geared towards developers who do not have a lot of experience implementing Object-Oriented solutions. After this talk, you will be able to identify situations where Object-Oriented design can be used to simplify complex conditional logic. Using the steps outlined, you will be able to refactor code to improve software architecture without changing existing functionality.",
    "presentation_id": 74,
    "feedback_url": "https://pyohio.typeform.com/to/GrAYCK",
    "speakers": [
      {
        "photo": {
          "description": "Aly Sivji",
          "url": "https://static.pyohio.org/2019/speakers/7.jpeg"
        },
        "website": "",
        "biography_html": "<p>Aly Sivji is a Canadian expat living in Chicago. By day, he builds backend systems at Numerator. By night, he is a co-organizer of the Chicago Python Users Group (ChiPy). Aly is an active participant in ChiPy\u2019s Mentorship Program and he loves helping intermediate developers become experts. Outside of Python, Aly enjoys cycling, reading, and rewatching old TV shows.</p>",
        "name": "Aly Sivji",
        "mastodon": "",
        "biography": "Aly Sivji is a Canadian expat living in Chicago. By day, he builds backend systems at Numerator. By night, he is a co-organizer of the Chicago Python Users Group (ChiPy). Aly is an active participant in ChiPy\u2019s Mentorship Program and he loves helping intermediate developers become experts. Outside of Python, Aly enjoys cycling, reading, and rewatching old TV shows.",
        "speaker_id": 7,
        "twitter": "CaiusSivjus"
      }
    ],
    "abstract_html": "<p>Writing software is about making trade-offs between getting things done and doing them right. Time constraints often force us to take shortcuts to handle slight variations resulting in patches of conditional logic sprinkled throughout our codebase. Workarounds that once allowed us to move quickly now hinder our progress in getting new features out to customers. It doesn't have to be this way!</p>\n<p>This talk will demonstrate how to use Object-Oriented programming patterns, specifically polymorphism, to handle conditional logic resulting in code that is easy to modify. The material will be presented in the context of a real-world code refactor for an open-source project. We will examine the initial solution, discuss its limitations, and walk through the process of refactoring nested <code>if</code> blocks into polymorphic classes.</p>\n<p>The session is geared towards developers who do not have a lot of experience implementing Object-Oriented solutions. After this talk, you will be able to identify situations where Object-Oriented design can be used to simplify complex conditional logic. Using the steps outlined, you will be able to refactor code to improve software architecture without changing existing functionality.</p>",
    "description": "`if` statements allow us to selectively execute code based on conditional logic. Overusing conditionals results in code that is hard to understand and difficult to modify. This talk will demonstrate how to refactor `if` statements into polymorphic classes, resulting in cleaner program design. After this session, you will be able to implement complex conditional logic using simple Python classes.",
    "description_html": "<p><code>if</code> statements allow us to selectively execute code based on conditional logic. Overusing conditionals results in code that is hard to understand and difficult to modify. This talk will demonstrate how to refactor <code>if</code> statements into polymorphic classes, resulting in cleaner program design. After this session, you will be able to implement complex conditional logic using simple Python classes.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T15:00:00"
  },
  {
    "title": "I Lost 25 Pounds Thanks to Python: Personal Data Analytics Using Pandas and Numpy",
    "youtube_url": "http://youtu.be/FlYGVOZPWDw",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-28T14:15:00",
      "start": "2019-07-28T13:45:00"
    },
    "abstract": "Your smartwatch and smartphone provide reams of data about your body, movement, behavior, health, and more. Python is an ideal language to use for analyzing, transforming, and displaying this data. Furthermore, numerous third-party packages such as NumPy, SciPy, pandas, and matplotlib make this process easier, faster, more fun, and more insightful than ever before.\r\n\r\nFurthermore, you can use these tools to get tangible results in your life: for example, during the first few months of 2019, I used a set of Python scripts operating on a combination of personal data sources to modify my habits and behaviors to lose 25 pounds!\r\n\r\nIn this talk we analyze several streams of data from Apple Watch and iPhone to explore what we can learn from them, individually and in combination. Data categories that we explore include:\r\n\r\n* sleep\r\n* fasting\r\n* heart rate\r\n* body weight\r\n\r\nWe use simple but powerful techniques from signal processing, including moving averages and filtering, to extract insight from the data. Additionally, we investigate correlations between the different data streams.\r\n\r\nPutting this methodology in place is fun, informative, and personally rewarding. In particular, you can use it for habit tracking, to increase self-knowledge and motivate useful habit change.",
    "presentation_id": 95,
    "feedback_url": "https://pyohio.typeform.com/to/HE8yL3",
    "speakers": [
      {
        "photo": {
          "description": "Jack Bennett",
          "url": "https://static.pyohio.org/2019/speakers/194.png"
        },
        "website": "",
        "biography_html": "<p>Jack Bennett works as a Principal Consultant at Improving in Columbus, OH, serving clients in the area of of web and mobile application development and support. His favorite languages and technologies include Python, git, bash, emacs, and JavaScript.</p>\n<p>He has worked in a variety of industries including data storage, stock trading (including hedge funds, broker-dealers, and HFT), and SaaS, as both an individual contributor and manager.</p>\n<p>Jack received a Bachelor of Applied Science degree in Engineering Science from the University of Toronto, and a PhD in Electrical and Computer Engineering from Brown University.</p>",
        "name": "Jack Bennett",
        "mastodon": "",
        "biography": "Jack Bennett works as a Principal Consultant at Improving in Columbus, OH, serving clients in the area of of web and mobile application development and support. His favorite languages and technologies include Python, git, bash, emacs, and JavaScript.\r\n\r\nHe has worked in a variety of industries including data storage, stock trading (including hedge funds, broker-dealers, and HFT), and SaaS, as both an individual contributor and manager.\r\n\r\nJack received a Bachelor of Applied Science degree in Engineering Science from the University of Toronto, and a PhD in Electrical and Computer Engineering from Brown University.",
        "speaker_id": 194,
        "twitter": "jackbennett_co"
      }
    ],
    "abstract_html": "<p>Your smartwatch and smartphone provide reams of data about your body, movement, behavior, health, and more. Python is an ideal language to use for analyzing, transforming, and displaying this data. Furthermore, numerous third-party packages such as NumPy, SciPy, pandas, and matplotlib make this process easier, faster, more fun, and more insightful than ever before.</p>\n<p>Furthermore, you can use these tools to get tangible results in your life: for example, during the first few months of 2019, I used a set of Python scripts operating on a combination of personal data sources to modify my habits and behaviors to lose 25 pounds!</p>\n<p>In this talk we analyze several streams of data from Apple Watch and iPhone to explore what we can learn from them, individually and in combination. Data categories that we explore include:</p>\n<ul>\n<li>sleep</li>\n<li>fasting</li>\n<li>heart rate</li>\n<li>body weight</li>\n</ul>\n<p>We use simple but powerful techniques from signal processing, including moving averages and filtering, to extract insight from the data. Additionally, we investigate correlations between the different data streams.</p>\n<p>Putting this methodology in place is fun, informative, and personally rewarding. In particular, you can use it for habit tracking, to increase self-knowledge and motivate useful habit change.</p>",
    "description": "Python provides a great set of built-in tools and third-party libraries for data analysis. Modern personal devices like smart watches or phones generate streams of data about body metrics, location, movement, and more. I describe Python-based methods for extracting and analyzing data from personal smart devices. I applied these methods to track and change habits and behaviors to lose 25 pounds.",
    "description_html": "<p>Python provides a great set of built-in tools and third-party libraries for data analysis. Modern personal devices like smart watches or phones generate streams of data about body metrics, location, movement, and more. I describe Python-based methods for extracting and analyzing data from personal smart devices. I applied these methods to track and change habits and behaviors to lose 25 pounds.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T13:45:00"
  },
  {
    "title": "Is This Your Card? Computer Vision for Playing Card Recognition",
    "youtube_url": "http://youtu.be/bYBFF-N1Z98",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-28T16:45:00",
      "start": "2019-07-28T16:15:00"
    },
    "abstract": "\"Pick a card, any card,\" the magician prompts you fanning out a deck of cards. You select a card, note its value, and hand it back to the magician. They do some sleight of hand, make the card disappear into the deck, and then make it reappear. You confirm that it is, indeed, your original card. The magician moves on and you get to go back to enjoying your dinner.\r\n\r\nWhere is the real magic? Is it in the magician's ability to make a card reappear? Or, is it something that many of us take for granted each and every day? In the very instant you glance at a card, you're able to take in details without even thinking about it.\r\n\r\nComputer Vision aims to teach computers to interact with the visual world. It has applications in navigation, automated inspection, medical image process, and so much more.\r\n\r\nIn this talk I will do the following:\r\n\r\n- Introduce the field of Computer Vision.\r\n- Demonstrate how to manipulate a webcam video feed and pre-process the video to perform Canny Edge Detection.\r\n- Use these edges to isolate a playing card image and, eventually, identify which playing card is being shown.\r\n\r\nNo prior knowledge of Computer Vision or Machine Learning is necessary.",
    "presentation_id": 96,
    "feedback_url": "https://pyohio.typeform.com/to/Lww1J2",
    "speakers": [
      {
        "photo": {
          "description": "Steve Crow",
          "url": "https://static.pyohio.org/2019/speakers/248.jpg"
        },
        "website": "https://smcrow.net",
        "biography_html": "<p>Steve is a self-proclaimed Mathlete, and King of Snark. He is the Java Developer Advocate at Nexmo. He is also a lover of Greyhounds, twisty puzzles, and European Board Games. When not talking math to non-math people, and Java to non-Java people, he can be found sipping coffee and hacking on code.</p>",
        "name": "Steve Crow",
        "mastodon": "",
        "biography": "Steve is a self-proclaimed Mathlete, and King of Snark. He is the Java Developer Advocate at Nexmo. He is also a lover of Greyhounds, twisty puzzles, and European Board Games. When not talking math to non-math people, and Java to non-Java people, he can be found sipping coffee and hacking on code.",
        "speaker_id": 248,
        "twitter": "cr0wst"
      }
    ],
    "abstract_html": "<p>\"Pick a card, any card,\" the magician prompts you fanning out a deck of cards. You select a card, note its value, and hand it back to the magician. They do some sleight of hand, make the card disappear into the deck, and then make it reappear. You confirm that it is, indeed, your original card. The magician moves on and you get to go back to enjoying your dinner.</p>\n<p>Where is the real magic? Is it in the magician's ability to make a card reappear? Or, is it something that many of us take for granted each and every day? In the very instant you glance at a card, you're able to take in details without even thinking about it.</p>\n<p>Computer Vision aims to teach computers to interact with the visual world. It has applications in navigation, automated inspection, medical image process, and so much more.</p>\n<p>In this talk I will do the following:</p>\n<ul>\n<li>Introduce the field of Computer Vision.</li>\n<li>Demonstrate how to manipulate a webcam video feed and pre-process the video to perform Canny Edge Detection.</li>\n<li>Use these edges to isolate a playing card image and, eventually, identify which playing card is being shown.</li>\n</ul>\n<p>No prior knowledge of Computer Vision or Machine Learning is necessary.</p>",
    "description": "Computer Vision aims to teach computers to interact with the visual world. It has applications navigation, automated inspection, assisting the visually impaired, and so much more. In this talk, I will explain and demonstrate how you can use Computer Vision to locate and identify a playing card in a live video feed.",
    "description_html": "<p>Computer Vision aims to teach computers to interact with the visual world. It has applications navigation, automated inspection, assisting the visually impaired, and so much more. In this talk, I will explain and demonstrate how you can use Computer Vision to locate and identify a playing card in a live video feed.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T16:15:00"
  },
  {
    "title": "Keeping Fun in Computing",
    "youtube_url": "http://youtu.be/qo4EJq1slD8",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-28T15:00:00",
      "start": "2019-07-28T14:30:00"
    },
    "abstract": "We'll also talk about some modern examples of how folks are ensuring technology remains not-so-serious, including  some examples specific to the Python community, and how some famous thinkers followed their natural curiosity to keep science fun, all to great success. \r\n \r\nAnd finally, we'll discuss how you and I can keep computing fun on a day-to-day basis, maintain and nurture our natural curiosity, and just be open to the unknown, all to the benefit of our field, those we work with, and ourselves.",
    "presentation_id": 101,
    "feedback_url": "https://pyohio.typeform.com/to/R5qmbF",
    "speakers": [
      {
        "photo": {
          "description": "Dustin Ingram",
          "url": "https://static.pyohio.org/2019/speakers/84.png"
        },
        "website": "",
        "biography_html": "<p>Dustin is a Developer Advocate at Google, focused on supporting the Python community on Google Cloud. He's also a member of the Python Packaging Authority, maintainer of the Python Package Index, and organizer for the PyTexas conference.</p>",
        "name": "Dustin Ingram",
        "mastodon": "",
        "biography": "Dustin is a Developer Advocate at Google, focused on supporting the Python community on Google Cloud. He's also a member of the Python Packaging Authority, maintainer of the Python Package Index, and organizer for the PyTexas conference.",
        "speaker_id": 84,
        "twitter": "di_codes"
      }
    ],
    "abstract_html": "<p>We'll also talk about some modern examples of how folks are ensuring technology remains not-so-serious, including  some examples specific to the Python community, and how some famous thinkers followed their natural curiosity to keep science fun, all to great success. </p>\n<p>And finally, we'll discuss how you and I can keep computing fun on a day-to-day basis, maintain and nurture our natural curiosity, and just be open to the unknown, all to the benefit of our field, those we work with, and ourselves.</p>",
    "description": "In this talk, we'll explore how maintaining a sense of fun and whimsy in science has a profound effect on discovery, innovation and progress.",
    "description_html": "<p>In this talk, we'll explore how maintaining a sense of fun and whimsy in science has a profound effect on discovery, innovation and progress.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T14:30:00"
  },
  {
    "title": "Learn How Computers Work Between Silicon and Assembly: Build a CPU with Python",
    "youtube_url": "http://youtu.be/iJqCMoAMlMA",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-28T15:00:00",
      "start": "2019-07-28T14:30:00"
    },
    "abstract": "Programming languages are designed for a specific level of abstraction or distance from the hardware. The main trade off is \"developer productivity\" vs. \"control over hardware\". C and assembly are low level and therefore map closely to CPU instructions. Python on the other hand goes through many layers, libraries, and a virtual machine before the CPU is reached. This allows powerful programs to be written concisely and cross-platform\u2014but it also conceals the true nature at the heart of our modern world. Unveiling the magic within can lead to interesting insights about how computing got to where it is today.\r\n\r\nSpecs for nerds: 8-bit words, 256 memory addresses, Von Neumann w/ shared address+data bus, DMA with numpy based buffer.",
    "presentation_id": 122,
    "feedback_url": "https://pyohio.typeform.com/to/BO1CMo",
    "speakers": [
      {
        "photo": {
          "description": "Zak Kohler",
          "url": "https://static.pyohio.org/2019/speakers/154.png"
        },
        "website": "http://y2kbugger.com",
        "biography_html": "<p>Zak Kohler is a Chemical Engineer by education but true computer geek at heart. He started programming in 3rd grade and has never looked back. Often Zak states that his biggest regret is not finding Python and Linux sooner...that didn't happen until university. Electronics is his second love and he fuses the two by playing with early computer hardware as well as modern microcontrollers. When Zak isn't messing with computers he can be found turning milk into cheese, drawing, or exploring the world on foot.</p>",
        "name": "Zak Kohler",
        "mastodon": "",
        "biography": "Zak Kohler is a Chemical Engineer by education but true computer geek at heart. He started programming in 3rd grade and has never looked back. Often Zak states that his biggest regret is not finding Python and Linux sooner...that didn't happen until university. Electronics is his second love and he fuses the two by playing with early computer hardware as well as modern microcontrollers. When Zak isn't messing with computers he can be found turning milk into cheese, drawing, or exploring the world on foot.",
        "speaker_id": 154,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>Programming languages are designed for a specific level of abstraction or distance from the hardware. The main trade off is \"developer productivity\" vs. \"control over hardware\". C and assembly are low level and therefore map closely to CPU instructions. Python on the other hand goes through many layers, libraries, and a virtual machine before the CPU is reached. This allows powerful programs to be written concisely and cross-platform\u2014but it also conceals the true nature at the heart of our modern world. Unveiling the magic within can lead to interesting insights about how computing got to where it is today.</p>\n<p>Specs for nerds: 8-bit words, 256 memory addresses, Von Neumann w/ shared address+data bus, DMA with numpy based buffer.</p>",
    "description": "We will build a CPU focused on transparency, interactivity, and modularity. Our CPU has a configurable architecture and machine language. Yes, you can invent your own assembly instructors to add functionality. We will cover registers, data/address busses, memory\u200c (ROM/RAM), IO, and assemblers.",
    "description_html": "<p>We will build a CPU focused on transparency, interactivity, and modularity. Our CPU has a configurable architecture and machine language. Yes, you can invent your own assembly instructors to add functionality. We will cover registers, data/address busses, memory\u200c (ROM/RAM), IO, and assemblers.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T14:30:00"
  },
  {
    "title": "Leave Your Inhibitions at the Database Connection",
    "youtube_url": "http://youtu.be/H_NrL7lTV8E",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-28T13:15:00",
      "start": "2019-07-28T12:45:00"
    },
    "abstract": "## Abstract\r\n\r\nReconciling old assumptions with new approaches can be difficult. This reconciliation can be especially difficult, when those assumptions and approaches correspond with one\u2019s emerging professional identity. A musicologist turned developer, a Rubyist turned Pythonist, I know well how intrapersonal tensions can shape (or hinder) approaches to writing code. This talk confronts these tensions by describing the technical and emotional dimensions of my less-than-easy journey from SQL to the Django ORM.\r\n\r\nDjango supports two basic approaches to interacting with a database: (1) running queries with the Django database-mapper (more commonly described as the \u201cORM\u201d), and (2) performing raw SQL. My first Django projects display a strong preference for the latter approach. I came to Django with very limited coding experience. I started my job at a Python shop as a freshly minted grad of Dev Bootcamp, where I had acquired some knowledge of Ruby on Rails and its ORM, but also learned about the possibilities and easeful-ness of SQL. I eschewed the Django ORM, in part because of its seeming unknowableness, but mainly because SQL was a familiar face in an unfamiliar land. In Django, I wrote SQL for simple queries (selecting with a WHERE clause), moderately challenging ones (joining multiple tables + ordering with CASE expressions), and obscenely complex ones (subqueries + aggregate functions + string manipulations). Whatever case, I generally found my queries to be transparent, flexible, and friendly.  \r\n\r\nIt took over a year for me to appreciate that the Django ORM does clever and astonishing things. I eventually found joy in annotating querysets with derived values, and I stood in awe of the Prefetch object in elaborate prefetch operations. The ORM, I learned, could produce clean code and also bypass the performance loss that comes with transforming SQL results into more amenable data types (e.g., namedtuple). \r\n\r\nIn this talk, I will share some lessons in Django. But also, I will suggest strategies for evaluating solid, familiar approaches and replacing them with alternative ones.",
    "presentation_id": 98,
    "feedback_url": "https://pyohio.typeform.com/to/gtkcy2",
    "speakers": [
      {
        "photo": {
          "description": "Regina Compton",
          "url": "https://static.pyohio.org/2019/speakers/203.jpg"
        },
        "website": "",
        "biography_html": "<p>Regina Compton came to coding after working several years as a musicologist, arts administrator, and music educator. Burdened with too many sacrifices at the altar of Weebly, she learned to code at Dev Bootcamp.</p>\n<p>Regina works for BrightHive, an impact-driven civic tech company that engineers solutions for safely and ethically sharing data. She previously worked at <a href=\"https://datamade.us/\">DataMade</a>, where she served as a lead developer on several projects that made complex data easy-to-understand, including Councilmatic <a href=\"https://boardagendas.metro.net/\">LA Metro</a>, <a href=\"https://github.com/datamade/coordinated-entry-screening\">Connectmenow.org</a> and <a href=\"https://studentunion.uptake.com/\">StudentUnion</a>. Regina loves writing clear, useful documentation (e.g., her co-authorship of <a href=\"https://github.com/datamade/testing-guidelines\">DataMade's testing guidelines</a>) and helpful, interesting blogs (e.g., a recent on on <a href=\"https://datamade.us/blog/crontabs-under-version-control/\">versioning crontabs</a>).</p>\n<p>Outside of coding, she often thinks about music, what it does, and how it does the things it does. She especially appreciates the composer George Frideric Handel and fancies herself an active \u201cHandelian\u201d \u2013 both as the web developer for the <a href=\"http://americanhandelsociety.org/\">American Handel Society</a> and as an author of a forthcoming essay on Handel's soprano singers. She also enjoys organizing innovative community arts events, most recently, <a href=\"http://amygdalanotes.org/\">Amygdala Notes</a> in Chicago. Regina loves spending time at Lake Michigan with her toddler-aged son, who \u2013 like his mother \u2013 embraces the bitter pleasures of cold-water swimming.</p>",
        "name": "Regina Compton",
        "mastodon": "",
        "biography": "Regina Compton came to coding after working several years as a musicologist, arts administrator, and music educator. Burdened with too many sacrifices at the altar of Weebly, she learned to code at Dev Bootcamp.\r\n\r\nRegina works for BrightHive, an impact-driven civic tech company that engineers solutions for safely and ethically sharing data. She previously worked at [DataMade](https://datamade.us/), where she served as a lead developer on several projects that made complex data easy-to-understand, including Councilmatic [LA Metro](https://boardagendas.metro.net/), [Connectmenow.org](https://github.com/datamade/coordinated-entry-screening) and [StudentUnion](https://studentunion.uptake.com/). Regina loves writing clear, useful documentation (e.g., her co-authorship of [DataMade's testing guidelines](https://github.com/datamade/testing-guidelines)) and helpful, interesting blogs (e.g., a recent on on [versioning crontabs](https://datamade.us/blog/crontabs-under-version-control/)).\r\n\r\nOutside of coding, she often thinks about music, what it does, and how it does the things it does. She especially appreciates the composer George Frideric Handel and fancies herself an active \u201cHandelian\u201d \u2013 both as the web developer for the [American Handel Society](http://americanhandelsociety.org/) and as an author of a forthcoming essay on Handel's soprano singers. She also enjoys organizing innovative community arts events, most recently, [Amygdala Notes](http://amygdalanotes.org/) in Chicago. Regina loves spending time at Lake Michigan with her toddler-aged son, who \u2013 like his mother \u2013 embraces the bitter pleasures of cold-water swimming.",
        "speaker_id": 203,
        "twitter": ""
      }
    ],
    "abstract_html": "<h2>Abstract</h2>\n<p>Reconciling old assumptions with new approaches can be difficult. This reconciliation can be especially difficult, when those assumptions and approaches correspond with one\u2019s emerging professional identity. A musicologist turned developer, a Rubyist turned Pythonist, I know well how intrapersonal tensions can shape (or hinder) approaches to writing code. This talk confronts these tensions by describing the technical and emotional dimensions of my less-than-easy journey from SQL to the Django ORM.</p>\n<p>Django supports two basic approaches to interacting with a database: (1) running queries with the Django database-mapper (more commonly described as the \u201cORM\u201d), and (2) performing raw SQL. My first Django projects display a strong preference for the latter approach. I came to Django with very limited coding experience. I started my job at a Python shop as a freshly minted grad of Dev Bootcamp, where I had acquired some knowledge of Ruby on Rails and its ORM, but also learned about the possibilities and easeful-ness of SQL. I eschewed the Django ORM, in part because of its seeming unknowableness, but mainly because SQL was a familiar face in an unfamiliar land. In Django, I wrote SQL for simple queries (selecting with a WHERE clause), moderately challenging ones (joining multiple tables + ordering with CASE expressions), and obscenely complex ones (subqueries + aggregate functions + string manipulations). Whatever case, I generally found my queries to be transparent, flexible, and friendly.  </p>\n<p>It took over a year for me to appreciate that the Django ORM does clever and astonishing things. I eventually found joy in annotating querysets with derived values, and I stood in awe of the Prefetch object in elaborate prefetch operations. The ORM, I learned, could produce clean code and also bypass the performance loss that comes with transforming SQL results into more amenable data types (e.g., namedtuple). </p>\n<p>In this talk, I will share some lessons in Django. But also, I will suggest strategies for evaluating solid, familiar approaches and replacing them with alternative ones.</p>",
    "description": "It is easy to cling to the familiar to avoid the unknown \u2013 even when unfamiliar approaches better serve your work. My talk explores this fact, specifically, by looking at the technical and emotional dimensions of my less-than-easy journey from writing raw SQL to using the Django ORM.",
    "description_html": "<p>It is easy to cling to the familiar to avoid the unknown \u2013 even when unfamiliar approaches better serve your work. My talk explores this fact, specifically, by looking at the technical and emotional dimensions of my less-than-easy journey from writing raw SQL to using the Django ORM.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T12:45:00"
  },
  {
    "title": "Lessons from Zero-Defect Software",
    "youtube_url": "http://youtu.be/1p9nR4z7aZY",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-27T11:45:00",
      "start": "2019-07-27T11:15:00"
    },
    "abstract": "You know that feeling when you look at a piece of code you or someone has written and it has a smell, it's inelegant, or its incomprehensibly complex. And then there's the other feeling, when you see a piece of code that's comprehensible, elegant, and it is ready to adopt the behavior you seek. It's this feeling we want to replicate and enhance. Instigated by a simple tweet, the speaker reaches back in time to explore the foundational practices that lead to our best code.\r\n\r\nStarting with Refactoring, we'll reflect on the techniques of change that retain stability while increasing sophistication or reducing complexity. We'll explore how code is a form of conversation and ways that conversation can transpire in a code repository.\r\n\r\nNext we will explore how Python has supported the principles and primitives of functional programming from early versions and how the constraints of functional programming lead to robust logic. We'll examine the functional nature of comprehensions and the powerful feature of functions as parameters.\r\n\r\nIn the main event, the speaker will draw on his early experiences with Zero-Defect Software, where one writes software with literally no bugs, and how these techniques can influence the design and implementation toward a more robust solution, starting with a rigorous but impractical ideal and distilling from that a pragmatic approach that retains much of the benefit of the technique. Integrating the lessons from refactoring and functional programming, a coding approach emerges that promises to enable and empower your development.",
    "presentation_id": 100,
    "feedback_url": "https://pyohio.typeform.com/to/ZtOfLI",
    "speakers": [
      {
        "photo": {
          "description": "Jason R. Coombs",
          "url": "https://static.pyohio.org/2019/speakers/237.jpg"
        },
        "website": "https://www.jaraco.com",
        "biography_html": "<p>Jason has worked with Python for over 20 years, contributing to a wide array of open-source projects including pywin32, setuptools, CherryPy, and CPython itself. As Executive Technical Director at YouGov, Jason applied principles of open-source development to run a global enterprise powered by Python applications and developed by remote developers around the world. Jason is passionate about advancing civilization through automation and believes the flexible yet high-level constructs of Python provides an ecosystem distinctly suited to this goal. Jason strives to converge an inherently divergent process of software development to best practices. Jason has recently joined Google as an SRE Manager.</p>",
        "name": "Jason R. Coombs",
        "mastodon": "",
        "biography": "Jason has worked with Python for over 20 years, contributing to a wide array of open-source projects including pywin32, setuptools, CherryPy, and CPython itself. As Executive Technical Director at YouGov, Jason applied principles of open-source development to run a global enterprise powered by Python applications and developed by remote developers around the world. Jason is passionate about advancing civilization through automation and believes the flexible yet high-level constructs of Python provides an ecosystem distinctly suited to this goal. Jason strives to converge an inherently divergent process of software development to best practices. Jason has recently joined Google as an SRE Manager.",
        "speaker_id": 237,
        "twitter": "jaraco"
      }
    ],
    "abstract_html": "<p>You know that feeling when you look at a piece of code you or someone has written and it has a smell, it's inelegant, or its incomprehensibly complex. And then there's the other feeling, when you see a piece of code that's comprehensible, elegant, and it is ready to adopt the behavior you seek. It's this feeling we want to replicate and enhance. Instigated by a simple tweet, the speaker reaches back in time to explore the foundational practices that lead to our best code.</p>\n<p>Starting with Refactoring, we'll reflect on the techniques of change that retain stability while increasing sophistication or reducing complexity. We'll explore how code is a form of conversation and ways that conversation can transpire in a code repository.</p>\n<p>Next we will explore how Python has supported the principles and primitives of functional programming from early versions and how the constraints of functional programming lead to robust logic. We'll examine the functional nature of comprehensions and the powerful feature of functions as parameters.</p>\n<p>In the main event, the speaker will draw on his early experiences with Zero-Defect Software, where one writes software with literally no bugs, and how these techniques can influence the design and implementation toward a more robust solution, starting with a rigorous but impractical ideal and distilling from that a pragmatic approach that retains much of the benefit of the technique. Integrating the lessons from refactoring and functional programming, a coding approach emerges that promises to enable and empower your development.</p>",
    "description": "Writing software with no defects is extremely difficult and expensive, but the lessons learned from such ambitious projects can inform our approach for a more practical development technique. This talk looks at how principles from zero-defect engineering, functional programming, and refactoring come together to produce robust, readable, and reliable code.",
    "description_html": "<p>Writing software with no defects is extremely difficult and expensive, but the lessons learned from such ambitious projects can inform our approach for a more practical development technique. This talk looks at how principles from zero-defect engineering, functional programming, and refactoring come together to produce robust, readable, and reliable code.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T11:15:00"
  },
  {
    "title": "Let's Build an ORM",
    "youtube_url": "http://youtu.be/6rw0p9AOYb8",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-28T16:00:00",
      "start": "2019-07-28T15:15:00"
    },
    "abstract": "The presentation will start with some background on the requirements and relational databases. Next, we\u2019ll build a basic ORM that allows creating simple tables and inserting, querying, and (if we have time) deleting records. Finally, the talk will cover some of the challenges of building a production-grade ORM, including caching, transactions, supporting multiple dialects, and we\u2019ll briefly discuss security implications of ORMs, including SQL injection. Attendees will leave with a greater appreciation for the inner workings of the ORMs that are used on a daily basis, while understanding the challenges that go into building one.",
    "presentation_id": 73,
    "feedback_url": "https://pyohio.typeform.com/to/xC5Ixp",
    "speakers": [
      {
        "photo": {
          "description": "Greg Back",
          "url": "https://static.pyohio.org/2019/speakers/236.jpg"
        },
        "website": "",
        "biography_html": "<p>I've been a Python developer for 10 years and have given several presentations on writing better Python code. I enjoy teaching others the things I've learned over the course of my career.</p>",
        "name": "Greg Back",
        "mastodon": "",
        "biography": "I've been a Python developer for 10 years and have given several presentations on writing better Python code. I enjoy teaching others the things I've learned over the course of my career.",
        "speaker_id": 236,
        "twitter": "gtback"
      }
    ],
    "abstract_html": "<p>The presentation will start with some background on the requirements and relational databases. Next, we\u2019ll build a basic ORM that allows creating simple tables and inserting, querying, and (if we have time) deleting records. Finally, the talk will cover some of the challenges of building a production-grade ORM, including caching, transactions, supporting multiple dialects, and we\u2019ll briefly discuss security implications of ORMs, including SQL injection. Attendees will leave with a greater appreciation for the inner workings of the ORMs that are used on a daily basis, while understanding the challenges that go into building one.</p>",
    "description": "Applications rely on data, and relational databases are a convenient way to organize structured information. Object-relational mappers like SQLAlchemy and Django\u2019s ORM are complex libraries, but they aren\u2019t black magic. De-mystify some of the magic as we build the basics of an ORM in under an hour.",
    "description_html": "<p>Applications rely on data, and relational databases are a convenient way to organize structured information. Object-relational mappers like SQLAlchemy and Django\u2019s ORM are complex libraries, but they aren\u2019t black magic. De-mystify some of the magic as we build the basics of an ORM in under an hour.</p>",
    "kind": "45-minute Talk",
    "start_time": "2019-07-28T15:15:00"
  },
  {
    "title": "Python Improvements (or This Is Not Your Teacher's Python)",
    "youtube_url": "http://youtu.be/AeYDSgsmA60",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-27T14:45:00",
      "start": "2019-07-27T14:00:00"
    },
    "abstract": "Topics that will be covered include:\r\n\r\n-\tf-strings\r\n-\tTyping\r\n-\ttuples \r\n-\tsecrets library\r\n-\tnanosecond timing \r\n-\thashing with sha3 and other techniques\r\n-\tdataclasses\r\n-\tPathlib\r\n-\tunderscores in numbers \r\n\r\nWe will discuss not only how to use the new features but why.",
    "presentation_id": 131,
    "feedback_url": "https://pyohio.typeform.com/to/JDAXtC",
    "speakers": [
      {
        "photo": {
          "description": "Travis Risner",
          "url": "https://static.pyohio.org/2019/speakers/52.png"
        },
        "website": "",
        "biography_html": "<p>I am a recently retired software developer.  I been programming in various languages most of my adult life.  Most recently I had been managing the PCI security aspects of a multimillion dollar service provider in the health and fitness field.</p>\n<p>In 2014, I started to learn Python.  Although new to Python, I bring an in depth understanding of large development efforts, conversions, and many aspects of professional, mature systems.</p>",
        "name": "Travis Risner",
        "mastodon": "",
        "biography": "I am a recently retired software developer.  I been programming in various languages most of my adult life.  Most recently I had been managing the PCI security aspects of a multimillion dollar service provider in the health and fitness field.\r\n\r\nIn 2014, I started to learn Python.  Although new to Python, I bring an in depth understanding of large development efforts, conversions, and many aspects of professional, mature systems.",
        "speaker_id": 52,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>Topics that will be covered include:</p>\n<ul>\n<li>f-strings</li>\n<li>Typing</li>\n<li>tuples </li>\n<li>secrets library</li>\n<li>nanosecond timing </li>\n<li>hashing with sha3 and other techniques</li>\n<li>dataclasses</li>\n<li>Pathlib</li>\n<li>underscores in numbers </li>\n</ul>\n<p>We will discuss not only how to use the new features but why.</p>",
    "description": "This session covers improvements to the Python language with 3.6 an 3.7.  We will discuss aspects such as f-strings, formal typing, the various kinds of tuples, more precise timing, better hashing, etc.",
    "description_html": "<p>This session covers improvements to the Python language with 3.6 an 3.7.  We will discuss aspects such as f-strings, formal typing, the various kinds of tuples, more precise timing, better hashing, etc.</p>",
    "kind": "45-minute Talk",
    "start_time": "2019-07-27T14:00:00"
  },
  {
    "title": "Quickly Build Your Own Personal Website with Python",
    "youtube_url": "http://youtu.be/mriPfTEll8o",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-28T13:15:00",
      "start": "2019-07-28T12:45:00"
    },
    "abstract": "Quick overview and pro/cons of common web development platforms and what they offer:\r\n\r\n* WordPress\r\n\r\n* Static site generators\r\n\r\n* Popular Python content management systems: plone, django-cms, and Wagtail\r\n\r\nWhat is [CodeRed CMS](https://github.com/coderedcorp/coderedcms)?\r\n\r\n* Open source pip package, based on Wagtail, Django, and Bootstrap CSS.\r\n\r\n* Provides a nice interface and pre-built components to get you up and running quickly with no code.\r\n\r\n* Similar level of editing and configurability as WordPress.\r\n\r\nLive tutorial: we will use CodeRed CMS to build a personal blog.\r\n\r\n* First we will install the pip package and get a basic site set up with zero coding required!\r\n\r\n* Second we will use Python to write a little code for advanced customization of our new website.\r\n\r\nAttendees will leave this talk with an understanding of the current state of python content management systems, and with knowledge on how to build their own personal website or blog.",
    "presentation_id": 138,
    "feedback_url": "https://pyohio.typeform.com/to/G2ecFx",
    "speakers": [
      {
        "photo": {
          "description": "Vince Salvino",
          "url": "https://static.pyohio.org/2019/speakers/139.png"
        },
        "website": "",
        "biography_html": "<p>Vince is a Cleveland-based web developer and small business owner (CodeRed LLC). Specializing in Python, .NET, and cloud services, his work through CodeRed helps marketing, IT, and non-profits improve their web apps and infrastructure.</p>\n<p>In his spare time he enjoys finding obscure hidden gems of Cleveland (mostly record shops, cafes, and breweries), and gardening at home in Shaker Heights.</p>",
        "name": "Vince Salvino",
        "mastodon": "",
        "biography": "Vince is a Cleveland-based web developer and small business owner (CodeRed LLC). Specializing in Python, .NET, and cloud services, his work through CodeRed helps marketing, IT, and non-profits improve their web apps and infrastructure.\r\n\r\nIn his spare time he enjoys finding obscure hidden gems of Cleveland (mostly record shops, cafes, and breweries), and gardening at home in Shaker Heights.",
        "speaker_id": 139,
        "twitter": "vincesalvino"
      }
    ],
    "abstract_html": "<p>Quick overview and pro/cons of common web development platforms and what they offer:</p>\n<ul>\n<li>\n<p>WordPress</p>\n</li>\n<li>\n<p>Static site generators</p>\n</li>\n<li>\n<p>Popular Python content management systems: plone, django-cms, and Wagtail</p>\n</li>\n</ul>\n<p>What is <a href=\"https://github.com/coderedcorp/coderedcms\">CodeRed CMS</a>?</p>\n<ul>\n<li>\n<p>Open source pip package, based on Wagtail, Django, and Bootstrap CSS.</p>\n</li>\n<li>\n<p>Provides a nice interface and pre-built components to get you up and running quickly with no code.</p>\n</li>\n<li>\n<p>Similar level of editing and configurability as WordPress.</p>\n</li>\n</ul>\n<p>Live tutorial: we will use CodeRed CMS to build a personal blog.</p>\n<ul>\n<li>\n<p>First we will install the pip package and get a basic site set up with zero coding required!</p>\n</li>\n<li>\n<p>Second we will use Python to write a little code for advanced customization of our new website.</p>\n</li>\n</ul>\n<p>Attendees will leave this talk with an understanding of the current state of python content management systems, and with knowledge on how to build their own personal website or blog.</p>",
    "description": "Haven't gotten around to building that personal blog? How about a website for your side project? Python actually has a rich ecosystem of web development tools that are easy to learn and fun to use! Bring your laptop and follow along as we build a personal blog LIVE in this talk using the pip package: CodeRed CMS (based on Wagtail and Django).",
    "description_html": "<p>Haven't gotten around to building that personal blog? How about a website for your side project? Python actually has a rich ecosystem of web development tools that are easy to learn and fun to use! Bring your laptop and follow along as we build a personal blog LIVE in this talk using the pip package: CodeRed CMS (based on Wagtail and Django).</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T12:45:00"
  },
  {
    "title": "Refactor Yourself",
    "youtube_url": "http://youtu.be/OhY28KJBA3c",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-28T16:45:00",
      "start": "2019-07-28T16:15:00"
    },
    "abstract": "We all have been there (or witnessed it in someone else): glassy-eyed, glaring into many open screens, fingers rushing through multiple lines of code, energy drink of some sort by your side, and possibly snacks that were dug out of the pantry (which should have been disposed of long ago). You are now propelled into a sleepless night \u2014 and hopefully, victory by the time the sun comes up. As you sit there trying to solve yet another complex problem, you become keenly aware of the fuzzy sensation in your brain, the fatigue in your body, the somewhat weird noises in your stomach, and your general lack of capacity to process what it is you came here to do. In this talk, we will walk through concepts of sleep hygiene, eating habits, digestive concerns, body aches, strains, and pains, mood concerns, and how they all affect your ability to function. We will discuss how to examine your recent behavior, prioritize any symptoms, what to tackle first, and how to persevere in the long run.",
    "presentation_id": 92,
    "feedback_url": "https://pyohio.typeform.com/to/Pp9Xqv",
    "speakers": [
      {
        "photo": {
          "description": "Esther B. Gotfryd, MSN, NP-C",
          "url": "https://static.pyohio.org/2019/speakers/78.JPG"
        },
        "website": "",
        "biography_html": "<p>I am a family nurse practitioner wearing multiple hats. I work as a primary care provider, in pain management and in addiction services. My daily routine involves taking care of people with chronic and acute medical conditions while incorporating treatment plans that are appropriate in consideration to their whole well being. One of my biggest passions is prevention and teaching anyone who wants to listen how to avoid or postpone exposure to lifelong chronic illnesses.\nAs a wife of a well seasoned developer I look at the general developer population and understand that they are in need of support both physically and mentally in order to give them a stronger edge in becoming even better developers.</p>",
        "name": "Esther B. Gotfryd, MSN, NP-C",
        "mastodon": "",
        "biography": "I am a family nurse practitioner wearing multiple hats. I work as a primary care provider, in pain management and in addiction services. My daily routine involves taking care of people with chronic and acute medical conditions while incorporating treatment plans that are appropriate in consideration to their whole well being. One of my biggest passions is prevention and teaching anyone who wants to listen how to avoid or postpone exposure to lifelong chronic illnesses.\r\nAs a wife of a well seasoned developer I look at the general developer population and understand that they are in need of support both physically and mentally in order to give them a stronger edge in becoming even better developers.",
        "speaker_id": 78,
        "twitter": "stlion_1976"
      }
    ],
    "abstract_html": "<p>We all have been there (or witnessed it in someone else): glassy-eyed, glaring into many open screens, fingers rushing through multiple lines of code, energy drink of some sort by your side, and possibly snacks that were dug out of the pantry (which should have been disposed of long ago). You are now propelled into a sleepless night \u2014 and hopefully, victory by the time the sun comes up. As you sit there trying to solve yet another complex problem, you become keenly aware of the fuzzy sensation in your brain, the fatigue in your body, the somewhat weird noises in your stomach, and your general lack of capacity to process what it is you came here to do. In this talk, we will walk through concepts of sleep hygiene, eating habits, digestive concerns, body aches, strains, and pains, mood concerns, and how they all affect your ability to function. We will discuss how to examine your recent behavior, prioritize any symptoms, what to tackle first, and how to persevere in the long run.</p>",
    "description": "Do you sometimes feel like a pile of legacy code? Do you dread refactoring yourself into a \"new hotness,\u201d due to the insurmountable amount of work it may take? Do you want to break free, but are unsure of where to start? Look no further, as this session will embark on a journey to refactor you, one red-green test at a time, starting with the highest priority issues first.",
    "description_html": "<p>Do you sometimes feel like a pile of legacy code? Do you dread refactoring yourself into a \"new hotness,\u201d due to the insurmountable amount of work it may take? Do you want to break free, but are unsure of where to start? Look no further, as this session will embark on a journey to refactor you, one red-green test at a time, starting with the highest priority issues first.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T16:15:00"
  },
  {
    "title": "Saturday Lightning Talks",
    "youtube_url": "http://youtu.be/moYkuNrmc1I",
    "schedule": {
      "room": "Cartoon 1, Cartoon 2",
      "end": "2019-07-27T18:30:00",
      "start": "2019-07-27T17:15:00"
    },
    "abstract": "1. Secure Your PyPI Account! by Ernest W. Durbin III\r\n2. Tim Has Too Many Projects -- Please Help by Tim 'mithro' Ansell\r\n3. Announcing PyCarolinas 2020!\r\n4. How I Wrote My Most Recent Tweet\r\n5. Building an ORM using dataclasses by Jace Browning\r\n6. Python in AWS Lambda by Peter Landoll\r\n7. G New Cash - Balancing Your Checkbook w/ Python by Paul Bromwell, Jr.\r\n8. Maintaining 100 PyPI Packages\r\n9. Property Testing Pandas / Bulwurk\r\n10. Venmo me @graduation by Josh Martin",
    "presentation_id": 142,
    "feedback_url": "https://pyohio.typeform.com/to/w8fyst",
    "speakers": [
      {
        "photo": {
          "description": "Dave Forgac",
          "url": "https://static.pyohio.org/2019/speakers/1.jpg"
        },
        "website": "https://daveops.com",
        "biography_html": "<p>Dave Forgac is a senior software engineer in Cleveland, OH. Dave has been a FOSS enthusiast ever since installing Linux for the first time in the late '90's. He loves building communities and is an organizer of PyOhio, CLEpy, and the Cleveland API Meetup.</p>",
        "name": "Dave Forgac",
        "mastodon": "",
        "biography": "Dave Forgac is a senior software engineer in Cleveland, OH. Dave has been a FOSS enthusiast ever since installing Linux for the first time in the late '90's. He loves building communities and is an organizer of PyOhio, CLEpy, and the Cleveland API Meetup.",
        "speaker_id": 1,
        "twitter": "tylerdave"
      }
    ],
    "abstract_html": "<ol>\n<li>Secure Your PyPI Account! by Ernest W. Durbin III</li>\n<li>Tim Has Too Many Projects -- Please Help by Tim 'mithro' Ansell</li>\n<li>Announcing PyCarolinas 2020!</li>\n<li>How I Wrote My Most Recent Tweet</li>\n<li>Building an ORM using dataclasses by Jace Browning</li>\n<li>Python in AWS Lambda by Peter Landoll</li>\n<li>G New Cash - Balancing Your Checkbook w/ Python by Paul Bromwell, Jr.</li>\n<li>Maintaining 100 PyPI Packages</li>\n<li>Property Testing Pandas / Bulwurk</li>\n<li>Venmo me @graduation by Josh Martin</li>\n</ol>",
    "description": "5-minute talks on topics of interest to the PyOhio community.",
    "description_html": "<p>5-minute talks on topics of interest to the PyOhio community.</p>",
    "kind": "Plenary",
    "start_time": "2019-07-27T17:15:00"
  },
  {
    "title": "Saturday Welcome",
    "youtube_url": "http://youtu.be/-iy2Aw8AH6w",
    "schedule": {
      "room": "Cartoon 1, Cartoon 2",
      "end": "2019-07-27T09:15:00",
      "start": "2019-07-27T09:00:00"
    },
    "abstract": "&nbsp;",
    "presentation_id": 144,
    "feedback_url": "https://pyohio.typeform.com/to/teDhYb",
    "speakers": [
      {
        "photo": {
          "description": "Dave Forgac",
          "url": "https://static.pyohio.org/2019/speakers/1.jpg"
        },
        "website": "https://daveops.com",
        "biography_html": "<p>Dave Forgac is a senior software engineer in Cleveland, OH. Dave has been a FOSS enthusiast ever since installing Linux for the first time in the late '90's. He loves building communities and is an organizer of PyOhio, CLEpy, and the Cleveland API Meetup.</p>",
        "name": "Dave Forgac",
        "mastodon": "",
        "biography": "Dave Forgac is a senior software engineer in Cleveland, OH. Dave has been a FOSS enthusiast ever since installing Linux for the first time in the late '90's. He loves building communities and is an organizer of PyOhio, CLEpy, and the Cleveland API Meetup.",
        "speaker_id": 1,
        "twitter": "tylerdave"
      }
    ],
    "abstract_html": "<p>&nbsp;</p>",
    "description": "Welcome to PyOhio! Important information and a brief overview of the conference.",
    "description_html": "<p>Welcome to PyOhio! Important information and a brief overview of the conference.</p>",
    "kind": "Plenary",
    "start_time": "2019-07-27T09:00:00"
  },
  {
    "title": "Scraping Your Way to a Dataset",
    "youtube_url": "http://youtu.be/Et4AqsIktHQ",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-27T14:45:00",
      "start": "2019-07-27T14:00:00"
    },
    "abstract": "It is essential to have a very large and high-quality dataset in order to perform significant analytics or to use in various machine learning tasks. For some tasks, there exists simple APIs or repositories of data to collect from. But for many other tasks like tracking prices of products, predicting stock prices, and predicting outcomes of sports games there isn't a convenient way to retrieve this information besides a webpage. Because of these circumstances, learning to scrape data from webpages and other sources allows us to create our own dataset. Additionally, scraping grants us the ability to ask better questions about data in the world.\r\n\r\nThis talk is geared towards beginner-to-intermediate Python developers that want to be able to ask and answer better questions through data. This talk will provide a guide for web scraping through two examples, and it will explain how to get the scraped data into a usable form. Throughout the talk, I will highlight some tips for improving scraper performance, minimizing the risk that a web server will stop you, and different ways to store the collected data. The first of the two examples will examine a simple case of scraping data about the lottery and the second will explore a more challenging case of scraping course information from a University.",
    "presentation_id": 66,
    "feedback_url": "https://pyohio.typeform.com/to/nmiFM8",
    "speakers": [
      {
        "photo": {
          "description": "Alex Zharichenko",
          "url": "https://static.pyohio.org/2019/speakers/209.jpg"
        },
        "website": "https://alexzharichenko.me",
        "biography_html": "<p>Alex Zhaichenko is a student studying in computer science and statistics at the University of Pittsburgh and is a Data Engineering Intern for Highmark Health. He's an active member in the Pittsburgh Python User group, organizer of one of the largest hackathons in Pittsburgh, and officer for the Pitt Computer Science Club at his university.</p>",
        "name": "Alex Zharichenko",
        "mastodon": "",
        "biography": "Alex Zhaichenko is a student studying in computer science and statistics at the University of Pittsburgh and is a Data Engineering Intern for Highmark Health. He's an active member in the Pittsburgh Python User group, organizer of one of the largest hackathons in Pittsburgh, and officer for the Pitt Computer Science Club at his university.",
        "speaker_id": 209,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>It is essential to have a very large and high-quality dataset in order to perform significant analytics or to use in various machine learning tasks. For some tasks, there exists simple APIs or repositories of data to collect from. But for many other tasks like tracking prices of products, predicting stock prices, and predicting outcomes of sports games there isn't a convenient way to retrieve this information besides a webpage. Because of these circumstances, learning to scrape data from webpages and other sources allows us to create our own dataset. Additionally, scraping grants us the ability to ask better questions about data in the world.</p>\n<p>This talk is geared towards beginner-to-intermediate Python developers that want to be able to ask and answer better questions through data. This talk will provide a guide for web scraping through two examples, and it will explain how to get the scraped data into a usable form. Throughout the talk, I will highlight some tips for improving scraper performance, minimizing the risk that a web server will stop you, and different ways to store the collected data. The first of the two examples will examine a simple case of scraping data about the lottery and the second will explore a more challenging case of scraping course information from a University.</p>",
    "description": "Large datasets are vital for the majority of analytic and machine learning tasks. But what happens when the data you need isn't available in some convenient and easily obtainable form? This talk will go through the process of data scraping to create a dataset that can be then used for various analytical or machine learning tasks.",
    "description_html": "<p>Large datasets are vital for the majority of analytic and machine learning tasks. But what happens when the data you need isn't available in some convenient and easily obtainable form? This talk will go through the process of data scraping to create a dataset that can be then used for various analytical or machine learning tasks.</p>",
    "kind": "45-minute Talk",
    "start_time": "2019-07-27T14:00:00"
  },
  {
    "title": "Search Logs + Machine Learning = Auto-Tagged Inventory",
    "youtube_url": "http://youtu.be/0MUlKbvIP3k",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-28T16:00:00",
      "start": "2019-07-28T15:15:00"
    },
    "abstract": "For e-commerce applications, matching users with the items they want is the name of the game. If they can't find what they want then how can they buy anything?! Typically this functionality is provided through search and browse experience. Search allows users to type in text and match against the text of the items in the inventory. Browse allows users to select filters and slice-and-dice the inventory down to the subset they are interested in. But with the shift toward mobile devices, no one wants to type anymore - thus browse is becoming dominant in the e-commerce experience.\r\n\r\nBut there's a problem! What if your inventory is not categorized? Perhaps your inventory is user generated or generated by external providers who don't tag and categorize the inventory. No categories and no tags means no browse experience and missed sales. You could hire an army of taxonomists and curators to tag items - but training and curation will be expensive. You can demand that your providers tag their items and adhere to your taxonomy - but providers will buck this new requirement unless they see obvious and immediate benefit. Worse, providers might use tags to game the system - artificially placing themselves in the wrong category to drive more sales. Worst of all, creating the right taxonomy is hard. You have to structure a taxonomy to realistically represent how your customers think about the inventory.\r\n\r\nEventbrite is investigating a tantalizing alternative: using a combination of customer interactions and machine learning to automatically tag and categorize our inventory. As customers interact with our platform - as they search for events and click on and purchase events that interest them - we implicitly gather information about how our users think about our inventory. Search text effectively acts like a tag and a click on an event card is a vote for that clicked event is representative of that tag. We are able to use this stream of information as training data for a machine learning classification model; and as we receive new inventory, we can automatically tag it with the text that customers will likely use when searching for it. This makes it possible to better understand our inventory, our supply and demand, and most importantly this allows us to build the browse experience that customers demand.\r\n\r\nIn this talk I will explain in depth the problem space and Eventbrite's approach in solving the problem. I will describe how we gathered training data from our search and click logs, and how we built and refined the model. I will present the output of the model and discuss both the positive results of our work as well as the work left to be done. Those attending this talk will leave with some new ideas to take back to their own business.",
    "presentation_id": 136,
    "feedback_url": "https://pyohio.typeform.com/to/wbTfbN",
    "speakers": [
      {
        "photo": {
          "description": "John Berryman",
          "url": "https://static.pyohio.org/2019/speakers/200.jpg"
        },
        "website": "",
        "biography_html": "<p>John Berryman started out in the field of Aerospace Engineering but soon found that he was more interested in math and software than in satellites and aircraft. He soon made the leap into software development specializing in search and recommendation technologies. John is now a Senior Software Engineer at Eventbrite, where he is helping build Eventbrite's event discovery platform. He also recently coauthored a tech book, Relevant Search, published by Manning. The proceeds from the book have mostly paid for the coffee consumed while writing it.</p>",
        "name": "John Berryman",
        "mastodon": "",
        "biography": "John Berryman started out in the field of Aerospace Engineering but soon found that he was more interested in math and software than in satellites and aircraft. He soon made the leap into software development specializing in search and recommendation technologies. John is now a Senior Software Engineer at Eventbrite, where he is helping build Eventbrite's event discovery platform. He also recently coauthored a tech book, Relevant Search, published by Manning. The proceeds from the book have mostly paid for the coffee consumed while writing it.",
        "speaker_id": 200,
        "twitter": "JnBrymn"
      }
    ],
    "abstract_html": "<p>For e-commerce applications, matching users with the items they want is the name of the game. If they can't find what they want then how can they buy anything?! Typically this functionality is provided through search and browse experience. Search allows users to type in text and match against the text of the items in the inventory. Browse allows users to select filters and slice-and-dice the inventory down to the subset they are interested in. But with the shift toward mobile devices, no one wants to type anymore - thus browse is becoming dominant in the e-commerce experience.</p>\n<p>But there's a problem! What if your inventory is not categorized? Perhaps your inventory is user generated or generated by external providers who don't tag and categorize the inventory. No categories and no tags means no browse experience and missed sales. You could hire an army of taxonomists and curators to tag items - but training and curation will be expensive. You can demand that your providers tag their items and adhere to your taxonomy - but providers will buck this new requirement unless they see obvious and immediate benefit. Worse, providers might use tags to game the system - artificially placing themselves in the wrong category to drive more sales. Worst of all, creating the right taxonomy is hard. You have to structure a taxonomy to realistically represent how your customers think about the inventory.</p>\n<p>Eventbrite is investigating a tantalizing alternative: using a combination of customer interactions and machine learning to automatically tag and categorize our inventory. As customers interact with our platform - as they search for events and click on and purchase events that interest them - we implicitly gather information about how our users think about our inventory. Search text effectively acts like a tag and a click on an event card is a vote for that clicked event is representative of that tag. We are able to use this stream of information as training data for a machine learning classification model; and as we receive new inventory, we can automatically tag it with the text that customers will likely use when searching for it. This makes it possible to better understand our inventory, our supply and demand, and most importantly this allows us to build the browse experience that customers demand.</p>\n<p>In this talk I will explain in depth the problem space and Eventbrite's approach in solving the problem. I will describe how we gathered training data from our search and click logs, and how we built and refined the model. I will present the output of the model and discuss both the positive results of our work as well as the work left to be done. Those attending this talk will leave with some new ideas to take back to their own business.</p>",
    "description": "Eventbrite is exploring a new machine learning approach that allows us to harvest data from customer search logs and automatically tag events based upon their content. The results have allowed us to provide users with a better inventory browsing experience.",
    "description_html": "<p>Eventbrite is exploring a new machine learning approach that allows us to harvest data from customer search logs and automatically tag events based upon their content. The results have allowed us to provide users with a better inventory browsing experience.</p>",
    "kind": "45-minute Talk",
    "start_time": "2019-07-28T15:15:00"
  },
  {
    "title": "Sipping the Nectar of Amazon from the Serverless Chalice",
    "youtube_url": "http://youtu.be/MFTod36TF0Y",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-27T17:00:00",
      "start": "2019-07-27T16:30:00"
    },
    "abstract": "You have a small piece of functionality that doesn\u2019t elegantly fit into various domains your existing application already covers. You\u2019re of course concerned about delivering that functionality to production, and making it securely available to the end user. All of this is followed with an \u201cif only I could\u201d stream of thoughts, and cautious conversations with your Ops team that don\u2019t go anywhere beyond hypotheticals. This is a perfect time to look into a serverless framework like Chalice. In this session, we will discover the flexibility, robustness, and ease of use inherent in serverless frameworks. We will dig deeper into ways to package production level code, including security, deployment, and load considerations. We will also touch on alternatives and general concerns for such architectural decisions.",
    "presentation_id": 102,
    "feedback_url": "https://pyohio.typeform.com/to/hacUkZ",
    "speakers": [
      {
        "photo": {
          "description": "Ilya Gotfryd",
          "url": "https://static.pyohio.org/2019/speakers/102.jpeg"
        },
        "website": "",
        "biography_html": "<p>Presently a Sr Python Developer at Binary Defense, Ilya has a wide span of software development experience. He has worked on everything from PC-based numerical controls for profile cutting and medical devices to medical web portals and labor management software. He has also had a great opportunity to teach software Bootcamp, as well as a mentor many interns and junior developers. He lives with his wonderful family and works in Cleveland, OH.</p>",
        "name": "Ilya Gotfryd",
        "mastodon": "",
        "biography": "Presently a Sr Python Developer at Binary Defense, Ilya has a wide span of software development experience. He has worked on everything from PC-based numerical controls for profile cutting and medical devices to medical web portals and labor management software. He has also had a great opportunity to teach software Bootcamp, as well as a mentor many interns and junior developers. He lives with his wonderful family and works in Cleveland, OH.",
        "speaker_id": 102,
        "twitter": "ikg_agent"
      }
    ],
    "abstract_html": "<p>You have a small piece of functionality that doesn\u2019t elegantly fit into various domains your existing application already covers. You\u2019re of course concerned about delivering that functionality to production, and making it securely available to the end user. All of this is followed with an \u201cif only I could\u201d stream of thoughts, and cautious conversations with your Ops team that don\u2019t go anywhere beyond hypotheticals. This is a perfect time to look into a serverless framework like Chalice. In this session, we will discover the flexibility, robustness, and ease of use inherent in serverless frameworks. We will dig deeper into ways to package production level code, including security, deployment, and load considerations. We will also touch on alternatives and general concerns for such architectural decisions.</p>",
    "description": "It never seems to be the right time to enter the sweet world of microservices. Each time you use \"serverless\" in a conversation, it dies right there near the water-cooler. How do you produce a POC, tests, a build, and proper security if your teammates can\u2019t come along? In this talk you will learn to: build, debug, validate, test, secure, and deploy with a build pipeline using a Python framework.",
    "description_html": "<p>It never seems to be the right time to enter the sweet world of microservices. Each time you use \"serverless\" in a conversation, it dies right there near the water-cooler. How do you produce a POC, tests, a build, and proper security if your teammates can\u2019t come along? In this talk you will learn to: build, debug, validate, test, secure, and deploy with a build pipeline using a Python framework.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T16:30:00"
  },
  {
    "title": "Sunday Lightning Talks",
    "youtube_url": "http://youtu.be/eHGicXNDovs",
    "schedule": {
      "room": "Cartoon 1, Cartoon 2",
      "end": "2019-07-28T18:00:00",
      "start": "2019-07-28T17:00:00"
    },
    "abstract": "1. Accessible Livetweeting by Kat Passen\r\n2. Pygmalion by Shelby Elzinga\r\n3. BYOAPI: Selenium to the rescue by Nik Kantar\r\n4. Busy Beaver by Aly Sivji\r\n5. Ministry of Silly Runtimes: Vintage Python by Dustin Ingram",
    "presentation_id": 143,
    "feedback_url": "https://pyohio.typeform.com/to/tyRjSc",
    "speakers": [
      {
        "photo": {
          "description": "Dave Forgac",
          "url": "https://static.pyohio.org/2019/speakers/1.jpg"
        },
        "website": "https://daveops.com",
        "biography_html": "<p>Dave Forgac is a senior software engineer in Cleveland, OH. Dave has been a FOSS enthusiast ever since installing Linux for the first time in the late '90's. He loves building communities and is an organizer of PyOhio, CLEpy, and the Cleveland API Meetup.</p>",
        "name": "Dave Forgac",
        "mastodon": "",
        "biography": "Dave Forgac is a senior software engineer in Cleveland, OH. Dave has been a FOSS enthusiast ever since installing Linux for the first time in the late '90's. He loves building communities and is an organizer of PyOhio, CLEpy, and the Cleveland API Meetup.",
        "speaker_id": 1,
        "twitter": "tylerdave"
      }
    ],
    "abstract_html": "<ol>\n<li>Accessible Livetweeting by Kat Passen</li>\n<li>Pygmalion by Shelby Elzinga</li>\n<li>BYOAPI: Selenium to the rescue by Nik Kantar</li>\n<li>Busy Beaver by Aly Sivji</li>\n<li>Ministry of Silly Runtimes: Vintage Python by Dustin Ingram</li>\n</ol>",
    "description": "5-minute talks on topics of interest to the PyOhio community.",
    "description_html": "<p>5-minute talks on topics of interest to the PyOhio community.</p>",
    "kind": "Plenary",
    "start_time": "2019-07-28T17:00:00"
  },
  {
    "title": "Sunday Welcome",
    "youtube_url": "http://youtu.be/nZMdqIWkxoY",
    "schedule": {
      "room": "Cartoon 1, Cartoon 2",
      "end": "2019-07-28T11:40:00",
      "start": "2019-07-28T11:30:00"
    },
    "abstract": "&nbsp;",
    "presentation_id": 145,
    "feedback_url": "https://pyohio.typeform.com/to/axn91f",
    "speakers": [
      {
        "photo": {
          "description": "Dave Forgac",
          "url": "https://static.pyohio.org/2019/speakers/1.jpg"
        },
        "website": "https://daveops.com",
        "biography_html": "<p>Dave Forgac is a senior software engineer in Cleveland, OH. Dave has been a FOSS enthusiast ever since installing Linux for the first time in the late '90's. He loves building communities and is an organizer of PyOhio, CLEpy, and the Cleveland API Meetup.</p>",
        "name": "Dave Forgac",
        "mastodon": "",
        "biography": "Dave Forgac is a senior software engineer in Cleveland, OH. Dave has been a FOSS enthusiast ever since installing Linux for the first time in the late '90's. He loves building communities and is an organizer of PyOhio, CLEpy, and the Cleveland API Meetup.",
        "speaker_id": 1,
        "twitter": "tylerdave"
      }
    ],
    "abstract_html": "<p>&nbsp;</p>",
    "description": "Welcome to PyOhio! Important information and a brief overview of the conference.",
    "description_html": "<p>Welcome to PyOhio! Important information and a brief overview of the conference.</p>",
    "kind": "Plenary",
    "start_time": "2019-07-28T11:30:00"
  },
  {
    "title": "Surviving Without Python",
    "youtube_url": "http://youtu.be/kj2JhIg-hQQ",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-28T13:15:00",
      "start": "2019-07-28T12:45:00"
    },
    "abstract": "Python is not the only \u201cfish in the sea\u201d - there are several good languages and frameworks out there that are awesome in their own right. And as software people, whether we are web developers, data scientists, or some other role, we probably won\u2019t spend 100% of our work using Python. It\u2019s inevitable. Web dev relies on JavaScript. Data scientists often use R and Scala. Backends frequently use C# and Java. Success as a modern software engineer requires inter-domain proficiency.\r\n\r\nPersonally, even though I love Python, I don\u2019t use it daily at my full time job. Nevertheless, Pythonic thinking guides my whole approach to software. I will talk about how the things that make Python great can be applied to non-Python places in three primary ways:\r\n\r\n1. Principles from the Zen of Python\r\n2. Projects that partially use Python\r\n3. People who build strong, healthy community\r\n\r\nI will provide stories, statistics, examples, projects, side-by-side code comparisons, and pictures to explain these points well. Python\u2019s values can make the software world a better place!",
    "presentation_id": 103,
    "feedback_url": "https://pyohio.typeform.com/to/Axa0AV",
    "speakers": [
      {
        "photo": {
          "description": "Andrew Knight",
          "url": "https://static.pyohio.org/2019/speakers/106.jpg"
        },
        "website": "https://www.automationpanda.com/",
        "biography_html": "<p>\u201cPandy\u201d is an engineer, consultant, and international speaker who loves all things software. He specializes in building robust test automation solutions from the ground up. He currently works at PrecisionLender in Cary, NC. Read his tech blog at AutomationPanda.com, and follow him on Twitter at @AutomationPanda.</p>",
        "name": "Andrew Knight",
        "mastodon": "",
        "biography": "\u201cPandy\u201d is an engineer, consultant, and international speaker who loves all things software. He specializes in building robust test automation solutions from the ground up. He currently works at PrecisionLender in Cary, NC. Read his tech blog at AutomationPanda.com, and follow him on Twitter at @AutomationPanda.",
        "speaker_id": 106,
        "twitter": "AutomationPanda"
      }
    ],
    "abstract_html": "<p>Python is not the only \u201cfish in the sea\u201d - there are several good languages and frameworks out there that are awesome in their own right. And as software people, whether we are web developers, data scientists, or some other role, we probably won\u2019t spend 100% of our work using Python. It\u2019s inevitable. Web dev relies on JavaScript. Data scientists often use R and Scala. Backends frequently use C# and Java. Success as a modern software engineer requires inter-domain proficiency.</p>\n<p>Personally, even though I love Python, I don\u2019t use it daily at my full time job. Nevertheless, Pythonic thinking guides my whole approach to software. I will talk about how the things that make Python great can be applied to non-Python places in three primary ways:</p>\n<ol>\n<li>Principles from the Zen of Python</li>\n<li>Projects that partially use Python</li>\n<li>People who build strong, healthy community</li>\n</ol>\n<p>I will provide stories, statistics, examples, projects, side-by-side code comparisons, and pictures to explain these points well. Python\u2019s values can make the software world a better place!</p>",
    "description": "Python is such a popular language for good reason: Its principles are strong. However, if Python is \u201cthe second-best language for everything\u201d\u2026 that means the _first-best_ is often chosen instead. Oh no! How can Pythonistas survive a project or workplace without our favorite language? Take a deep breath, because I\u2019ll show you how to apply things that make Python great to other software spaces.",
    "description_html": "<p>Python is such a popular language for good reason: Its principles are strong. However, if Python is \u201cthe second-best language for everything\u201d\u2026 that means the <em>first-best</em> is often chosen instead. Oh no! How can Pythonistas survive a project or workplace without our favorite language? Take a deep breath, because I\u2019ll show you how to apply things that make Python great to other software spaces.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T12:45:00"
  },
  {
    "title": "The Blameless Post Mortem: How Embracing Failure Makes Us Better",
    "youtube_url": null,
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-27T16:15:00",
      "start": "2019-07-27T15:45:00"
    },
    "abstract": "While developing software, bugs and mistakes are inevitable. Come to hear how we can improve the approaches we often take as software developers to work better with one another in heated moments of failure and the aftermath of incidents. Through better interactions we can build better teams and create better services.\r\n\r\nIn my career I have worked in a blameless post-mortem and a blame-full post mortem environment, across a variety of projects ranging from individual python libraries, to core infrastructure for a cloud. I am excited to share how I think not assigning blame when things go wrong results in a better team and a better product.",
    "presentation_id": 75,
    "feedback_url": "https://pyohio.typeform.com/to/Ic3HCd",
    "speakers": [
      {
        "photo": {
          "description": "Chris Wilcox",
          "url": "https://static.pyohio.org/2019/speakers/234.jpg"
        },
        "website": "",
        "biography_html": "<p>Chris is a developer at Google in Seattle, WA, USA and works on the Google Cloud Platform Client Libraries team, focusing on dynamic languages and their users. Before joining Google, Chris spent 6 years working on compilers, cloud platforms, and developer tooling for Microsoft. He brings a passion for enabling developers everywhere through better tools and libraries. In his spare time you can find Chris running or cycling nowhere in particular or riding his motorcycle.</p>",
        "name": "Chris Wilcox",
        "mastodon": "",
        "biography": "Chris is a developer at Google in Seattle, WA, USA and works on the Google Cloud Platform Client Libraries team, focusing on dynamic languages and their users. Before joining Google, Chris spent 6 years working on compilers, cloud platforms, and developer tooling for Microsoft. He brings a passion for enabling developers everywhere through better tools and libraries. In his spare time you can find Chris running or cycling nowhere in particular or riding his motorcycle.",
        "speaker_id": 234,
        "twitter": "chriswilcox47"
      }
    ],
    "abstract_html": "<p>While developing software, bugs and mistakes are inevitable. Come to hear how we can improve the approaches we often take as software developers to work better with one another in heated moments of failure and the aftermath of incidents. Through better interactions we can build better teams and create better services.</p>\n<p>In my career I have worked in a blameless post-mortem and a blame-full post mortem environment, across a variety of projects ranging from individual python libraries, to core infrastructure for a cloud. I am excited to share how I think not assigning blame when things go wrong results in a better team and a better product.</p>",
    "description": "In today\u2019s world of developing services we tend to move fast and with that comes mistakes. This talk will discuss using post-mortems to turn incidents into opportunities for improvement, instead of just an opportunity to assign blame.",
    "description_html": "<p>In today\u2019s world of developing services we tend to move fast and with that comes mistakes. This talk will discuss using post-mortems to turn incidents into opportunities for improvement, instead of just an opportunity to assign blame.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T15:45:00"
  },
  {
    "title": "The Gig is Up: Radical Shifts That Save Cultures, Teams, and Companies",
    "youtube_url": "http://youtu.be/0t0Ze3c3kGk",
    "schedule": {
      "room": "Cartoon 1, Cartoon 2",
      "end": "2019-07-28T12:30:00",
      "start": "2019-07-28T11:40:00"
    },
    "abstract": "Greg will speak on how a radical paradigm shift can save not just our projects and teams, but our very passion to do the work itself.",
    "presentation_id": 125,
    "feedback_url": "https://pyohio.typeform.com/to/oF0kGT",
    "speakers": [
      {
        "photo": {
          "description": "Greg Svoboda",
          "url": "https://static.pyohio.org/2019/speakers/63.JPG"
        },
        "website": "",
        "biography_html": "<p>Greg serves as Lead Developer for GE's Connected Homes, helping you impress your in-laws with your voice-controlled lights. Born-and-raised in Cleveland, and has a burning passion to see technology used in ways that help those with disabilities live awesome lives. His former life included titles like 'professional juggler', 'ordained minister', 'turntable dj', 'bartender', and most recently,  'founder/CTO'.</p>",
        "name": "Greg Svoboda",
        "mastodon": "",
        "biography": "Greg serves as Lead Developer for GE's Connected Homes, helping you impress your in-laws with your voice-controlled lights. Born-and-raised in Cleveland, and has a burning passion to see technology used in ways that help those with disabilities live awesome lives. His former life included titles like 'professional juggler', 'ordained minister', 'turntable dj', 'bartender', and most recently,  'founder/CTO'.",
        "speaker_id": 63,
        "twitter": "gregsvo"
      }
    ],
    "abstract_html": "<p>Greg will speak on how a radical paradigm shift can save not just our projects and teams, but our very passion to do the work itself.</p>",
    "description": "The way we traditionally build, lead, and participate in development teams isn\u2019t doing us any favors. In fact, it might be literally killing us.",
    "description_html": "<p>The way we traditionally build, lead, and participate in development teams isn\u2019t doing us any favors. In fact, it might be literally killing us.</p>",
    "kind": "Keynote",
    "start_time": "2019-07-28T11:40:00"
  },
  {
    "title": "The Magic of Python",
    "youtube_url": "http://youtu.be/X9poNqBfX4Q",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-27T15:30:00",
      "start": "2019-07-27T15:00:00"
    },
    "abstract": "In this talk, I will introduce and enumerate over magic methods available in Python. This is an introductory talk for anyone with basic familiarity of Python. For each class of magic methods that I introduce, I'll provide example code samples.\r\n\r\nI will start off by introducing basic magic methods that allow you to do things like initializing objects and printing readable versions of objects. I will then go over select magic methods that allow for emulating numeric types. I will then cover methods that enable you to emulate sequences and write objects that can be indexed and iterated over. I will conclude by talking about context managers (that allow for managing pre-step and post-step actions) and Abstract Base Classes in the abc module that will allow for you to get free functionality if you provide the implementation for certain magic methods on your classes.",
    "presentation_id": 80,
    "feedback_url": "https://pyohio.typeform.com/to/CkASaF",
    "speakers": [
      {
        "photo": {
          "description": "Darshan Markandaiah",
          "url": "https://static.pyohio.org/2019/speakers/266.jpg"
        },
        "website": "",
        "biography_html": "<p>Hi there! My name is Darshan. I have been working in Python codebases for the past 6 years. I\u2019m currently in the backend engineering team at Venmo in New York City.</p>",
        "name": "Darshan Markandaiah",
        "mastodon": "",
        "biography": "Hi there! My name is Darshan. I have been working in Python codebases for the past 6 years. I\u2019m currently in the backend engineering team at Venmo in New York City.",
        "speaker_id": 266,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>In this talk, I will introduce and enumerate over magic methods available in Python. This is an introductory talk for anyone with basic familiarity of Python. For each class of magic methods that I introduce, I'll provide example code samples.</p>\n<p>I will start off by introducing basic magic methods that allow you to do things like initializing objects and printing readable versions of objects. I will then go over select magic methods that allow for emulating numeric types. I will then cover methods that enable you to emulate sequences and write objects that can be indexed and iterated over. I will conclude by talking about context managers (that allow for managing pre-step and post-step actions) and Abstract Base Classes in the abc module that will allow for you to get free functionality if you provide the implementation for certain magic methods on your classes.</p>",
    "description": "Python has many built in magic functions that are used internally by classes for certain actions. For example, adding two numbers calls the `__add__` method and iterating over a list calls the  `__iter__`  method. I will expand on this Duck Typing principle and enumerate over a range of magic methods that you can add to your classes to have a cleaner codebase.",
    "description_html": "<p>Python has many built in magic functions that are used internally by classes for certain actions. For example, adding two numbers calls the <code>__add__</code> method and iterating over a list calls the  <code>__iter__</code>  method. I will expand on this Duck Typing principle and enumerate over a range of magic methods that you can add to your classes to have a cleaner codebase.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T15:00:00"
  },
  {
    "title": "The Mediocre Programmer",
    "youtube_url": "http://youtu.be/XNwOnRmCqZ0",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-28T14:15:00",
      "start": "2019-07-28T13:45:00"
    },
    "abstract": "This talk is highlights from a book that I'm writing about the journey of being a mediocre programmer. Beginners tend to get all of the love, and advanced programmers get all of the respect and glory. But we don't have much for helping intermediate programmers. We don't tend to consider how difficult it can be to work through the exuberance of beginning programming (where everything is new, fresh, and exciting) into becoming better programmers. We're just expected to figure things out on our own. This talk draws on my experiences of being a mediocre programmer and gives advice and tips on how to become better programmers. We'll cover how to find a group of traveling companions, how to focus on learning one thing at a time, and how to deal with the struggles of our emotions and self doubt. We'll also cover examining our emotions and understanding when the spark that drew us to programming is truly burned out.",
    "presentation_id": 111,
    "feedback_url": "https://pyohio.typeform.com/to/b4I1ZE",
    "speakers": [
      {
        "photo": {
          "description": "Craig Maloney",
          "url": "https://static.pyohio.org/2019/speakers/231.png"
        },
        "website": "http://decafbad.net",
        "biography_html": "<p>I've been interested in computers back when Atari, Commodore and Sinclair roamed the earth. From the primordial soup of BASIC and Pascal I emerged with hopes of finding a career in computing. The emergence of the World Wide Web and Linux gave me fertile ground to build a career where I could trade Perl code and system administration for paychecks. After a brief period of trying to figure out the ever-popular Java thing I stumbled into the Python community, where I found a language that I actually enjoyed using. Many projects and lines of code later I'm happy to say that I'm still finding joy in writing Python. </p>\n<p>When I'm not coding Python I'm a podcaster, writer, and game designer. I'm the host of <a href=\"http://openmetalcast.com\">Open Metalcast</a> (a podcast dedicated to Creative Commons Licensed Metal Music) and co-host of <a href=\"http://lococast.net\">Lococast.net</a>. I'm a board member of and frequent speaker at the <a href=\"http://mug.org\">Michigan!/usr/group</a>. I'm also a contributor to the online webcomic Pepper&amp;Carrot, where I am the lead maintainer of the wiki. </p>\n<p>Learn more at <a href=\"http://decafbad.net\">http://decafbad.net</a>.</p>",
        "name": "Craig Maloney",
        "mastodon": "@craigmaloney@octodon.social",
        "biography": "I've been interested in computers back when Atari, Commodore and Sinclair roamed the earth. From the primordial soup of BASIC and Pascal I emerged with hopes of finding a career in computing. The emergence of the World Wide Web and Linux gave me fertile ground to build a career where I could trade Perl code and system administration for paychecks. After a brief period of trying to figure out the ever-popular Java thing I stumbled into the Python community, where I found a language that I actually enjoyed using. Many projects and lines of code later I'm happy to say that I'm still finding joy in writing Python. \r\n\r\nWhen I'm not coding Python I'm a podcaster, writer, and game designer. I'm the host of [Open Metalcast](http://openmetalcast.com) (a podcast dedicated to Creative Commons Licensed Metal Music) and co-host of [Lococast.net](http://lococast.net). I'm a board member of and frequent speaker at the [Michigan!/usr/group](http://mug.org). I'm also a contributor to the online webcomic Pepper&Carrot, where I am the lead maintainer of the wiki. \r\n\r\nLearn more at [http://decafbad.net](http://decafbad.net).",
        "speaker_id": 231,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>This talk is highlights from a book that I'm writing about the journey of being a mediocre programmer. Beginners tend to get all of the love, and advanced programmers get all of the respect and glory. But we don't have much for helping intermediate programmers. We don't tend to consider how difficult it can be to work through the exuberance of beginning programming (where everything is new, fresh, and exciting) into becoming better programmers. We're just expected to figure things out on our own. This talk draws on my experiences of being a mediocre programmer and gives advice and tips on how to become better programmers. We'll cover how to find a group of traveling companions, how to focus on learning one thing at a time, and how to deal with the struggles of our emotions and self doubt. We'll also cover examining our emotions and understanding when the spark that drew us to programming is truly burned out.</p>",
    "description": "Mediocre Programmers? What is that? Shouldn't we want to be great programmers instead? In this talk we'll discuss what it means to be a mediocre programmer. We'll consider the many pitfalls that may befall you on your journey, from self-doubt to burnout, and share tips for how to cope with the challenges of programming and when it might be time to try something new.",
    "description_html": "<p>Mediocre Programmers? What is that? Shouldn't we want to be great programmers instead? In this talk we'll discuss what it means to be a mediocre programmer. We'll consider the many pitfalls that may befall you on your journey, from self-doubt to burnout, and share tips for how to cope with the challenges of programming and when it might be time to try something new.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T13:45:00"
  },
  {
    "title": "The Riddle of the Intersphinx: Configuration and Cross-Reference Composition",
    "youtube_url": "http://youtu.be/CfInPYkbTZE",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-28T14:15:00",
      "start": "2019-07-28T13:45:00"
    },
    "abstract": "[Sphinx](http://www.sphinx-doc.org) is a documentation generator used by the [core Python documentation](https://docs.python.org/3/library/index.html) and numerous other packages such as [SciPy](https://docs.scipy.org/doc/scipy/reference/), [Django](https://docs.djangoproject.com/en/), and [Blender](https://docs.blender.org/api/current/). Sphinx supports cross-references across project boundaries via its ['intersphinx' extension](http://www.sphinx-doc.org/en/stable/ext/intersphinx.html#module-sphinx.ext.intersphinx), which uses data from an objects inventory file generated by Sphinx when building HTML docs.  However, configuration of the intersphinx mappings to external documentation and correct composition of the cross-references to specific external objects can both be challenging to achieve, as the necessary reference syntax can vary in a non-obvious way. Related messages/warnings issued during the Sphinx build process, if enabled, are useful for identifying that a problem exists, but are typically of minimal help in fixing the broken references. The [:any: role](http://www.sphinx-doc.org/en/stable/markup/inline.html#role-any) is convenient for some cases, but is unhelpful when a given object name is ambiguous (e.g., with the Python [max() builtin](https://docs.python.org/3/library/functions.html#max) versus [numpy.ndarray.max](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.max.html)).\r\n\r\nIn this talk, I will describe a (mostly) systematic approach to intersphinx configuration and usage, including locating the inventory for an external docset; decoding and parsing the inventory to obtain the information needed for a functional intersphinx reference; and constructing the cross-reference from this information. As I hope to demonstrate, using intersphinx is quite easy, as long as you know where to look for key information, and what to do with it.",
    "presentation_id": 137,
    "feedback_url": "https://pyohio.typeform.com/to/OongGn",
    "speakers": [
      {
        "photo": {
          "description": "Brian Skinn",
          "url": "https://static.pyohio.org/2019/speakers/227.png"
        },
        "website": "https://bskinn.github.io",
        "biography_html": "<p>I\u2019m a Ph.D. chemical engineer with 7.5 years of industrial R&amp;D experience. I have nearly 25 years of self-directed programming experience, the majority of which has been in Python and VBA (Excel/Outlook/Word). I love working on anything that makes someone's workflow easier, faster, or better: crunching data with a click (or, better, a keyboard shortcut), collecting/formatting/summarizing key information, and in general just automating all the things.</p>",
        "name": "Brian Skinn",
        "mastodon": "",
        "biography": "I\u2019m a Ph.D. chemical engineer with 7.5 years of industrial R&D experience. I have nearly 25 years of self-directed programming experience, the majority of which has been in Python and VBA (Excel/Outlook/Word). I love working on anything that makes someone's workflow easier, faster, or better: crunching data with a click (or, better, a keyboard shortcut), collecting/formatting/summarizing key information, and in general just automating all the things.",
        "speaker_id": 227,
        "twitter": "btskinn"
      }
    ],
    "abstract_html": "<p><a href=\"http://www.sphinx-doc.org\">Sphinx</a> is a documentation generator used by the <a href=\"https://docs.python.org/3/library/index.html\">core Python documentation</a> and numerous other packages such as <a href=\"https://docs.scipy.org/doc/scipy/reference/\">SciPy</a>, <a href=\"https://docs.djangoproject.com/en/\">Django</a>, and <a href=\"https://docs.blender.org/api/current/\">Blender</a>. Sphinx supports cross-references across project boundaries via its <a href=\"http://www.sphinx-doc.org/en/stable/ext/intersphinx.html#module-sphinx.ext.intersphinx\">'intersphinx' extension</a>, which uses data from an objects inventory file generated by Sphinx when building HTML docs.  However, configuration of the intersphinx mappings to external documentation and correct composition of the cross-references to specific external objects can both be challenging to achieve, as the necessary reference syntax can vary in a non-obvious way. Related messages/warnings issued during the Sphinx build process, if enabled, are useful for identifying that a problem exists, but are typically of minimal help in fixing the broken references. The <a href=\"http://www.sphinx-doc.org/en/stable/markup/inline.html#role-any\">:any: role</a> is convenient for some cases, but is unhelpful when a given object name is ambiguous (e.g., with the Python <a href=\"https://docs.python.org/3/library/functions.html#max\">max() builtin</a> versus <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.max.html\">numpy.ndarray.max</a>).</p>\n<p>In this talk, I will describe a (mostly) systematic approach to intersphinx configuration and usage, including locating the inventory for an external docset; decoding and parsing the inventory to obtain the information needed for a functional intersphinx reference; and constructing the cross-reference from this information. As I hope to demonstrate, using intersphinx is quite easy, as long as you know where to look for key information, and what to do with it.</p>",
    "description": "Sphinx is a documentation generator used by the core Python documentation and numerous other projects in the Python ecosystem. Sphinx supports cross-references between documentation sets via its \u2018intersphinx\u2019 extension; however, proper configuration is not always straightforward, and cross-references can be finicky to craft correctly. This talk aims to demystify these riddles of intersphinx usage.",
    "description_html": "<p>Sphinx is a documentation generator used by the core Python documentation and numerous other projects in the Python ecosystem. Sphinx supports cross-references between documentation sets via its \u2018intersphinx\u2019 extension; however, proper configuration is not always straightforward, and cross-references can be finicky to craft correctly. This talk aims to demystify these riddles of intersphinx usage.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T13:45:00"
  },
  {
    "title": "The Value of Docstrings",
    "youtube_url": "http://youtu.be/fl8baeAa3uI",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-27T16:15:00",
      "start": "2019-07-27T15:45:00"
    },
    "abstract": "Python docstrings differ from regular comments in that they are stored\r\nas an attribute of a callable object and are accessible through the\r\nhelp() builtin function. However, their importance in writing\r\nreadable and maintainable python modules has very little to do with their\r\ntechnical language features in Python, and much more to do with the\r\ndiscipline they bring to effective documentation.\r\n\r\nAny new developer will encounter well reasoned advice on the need to\r\ncomprehensively comment their code, and contrary but equally reasonable advice\r\nto avoid using comments at all by writing better code. This talk will briefly\r\nexplore these viewpoints, and then review the standard conventions for Python\r\ndocstrings. I argue that the consistent and conventional use\r\nof Python docstrings results in more readable and maintainable code than\r\nthat written with only unstructured comments, independent of how sparse or\r\nplentiful those comments may be.\r\n\r\nAdditional areas of improvement in software design are discussed, including\r\neffective encapsulation, the difficulty of naming methods, \"docstring driven\r\ndevelopment\", extension into external documentation, and integration with testing.\r\nFinally, I argue that Python\r\ndocstring conventions are a model for improved software design in general,\r\nand are worth adopting even in other languages that do not necessarily\r\nsupport actual docstrings.",
    "presentation_id": 84,
    "feedback_url": "https://pyohio.typeform.com/to/FYPsAj",
    "speakers": [
      {
        "photo": {
          "description": "Eric Appelt",
          "url": "https://static.pyohio.org/2019/speakers/85.jpg"
        },
        "website": "",
        "biography_html": "<p>I'm a developer, system administrator, scientist, and educator who uses python in all of these roles. I currently work at the Vanderbilt University Advanced Computing Center for Research and Education (ACCRE) where I am developing a python libraries for systems and account management for our high-performance computing cluster.</p>",
        "name": "Eric Appelt",
        "mastodon": "",
        "biography": "I'm a developer, system administrator, scientist, and educator who uses python in all of these roles. I currently work at the Vanderbilt University Advanced Computing Center for Research and Education (ACCRE) where I am developing a python libraries for systems and account management for our high-performance computing cluster.",
        "speaker_id": 85,
        "twitter": "appeltel"
      }
    ],
    "abstract_html": "<p>Python docstrings differ from regular comments in that they are stored\nas an attribute of a callable object and are accessible through the\nhelp() builtin function. However, their importance in writing\nreadable and maintainable python modules has very little to do with their\ntechnical language features in Python, and much more to do with the\ndiscipline they bring to effective documentation.</p>\n<p>Any new developer will encounter well reasoned advice on the need to\ncomprehensively comment their code, and contrary but equally reasonable advice\nto avoid using comments at all by writing better code. This talk will briefly\nexplore these viewpoints, and then review the standard conventions for Python\ndocstrings. I argue that the consistent and conventional use\nof Python docstrings results in more readable and maintainable code than\nthat written with only unstructured comments, independent of how sparse or\nplentiful those comments may be.</p>\n<p>Additional areas of improvement in software design are discussed, including\neffective encapsulation, the difficulty of naming methods, \"docstring driven\ndevelopment\", extension into external documentation, and integration with testing.\nFinally, I argue that Python\ndocstring conventions are a model for improved software design in general,\nand are worth adopting even in other languages that do not necessarily\nsupport actual docstrings.</p>",
    "description": "Docstrings are a common convention in Python programming, but\r\ntheir value may be taken for granted. In the absence of docstrings, schools of thought on writing effective code involve using many comments or using few if any comments. I will\r\nargue that docstrings improve upon these approaches, and then explore how they can positively impact encapsulation, testing, documentation, and design.",
    "description_html": "<p>Docstrings are a common convention in Python programming, but\ntheir value may be taken for granted. In the absence of docstrings, schools of thought on writing effective code involve using many comments or using few if any comments. I will\nargue that docstrings improve upon these approaches, and then explore how they can positively impact encapsulation, testing, documentation, and design.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T15:45:00"
  },
  {
    "title": "# TODO: Add Comments: 5 Tips for _Winning_ at Code Comments",
    "youtube_url": "http://youtu.be/Y3eKG3mpj_E",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-27T17:00:00",
      "start": "2019-07-27T16:30:00"
    },
    "abstract": "Documentation often gets paid lip service, and code comments almost always suffer the most. And yet they're often that last-moment savior during archeological expeditions into depths no longer known, unearthing obscure bugs or just trying to understand the foundation upon which to build something new.\r\n\r\nAlas, we're all human, and thus oh so very fallible. And so we fall prey to habits which make the situation worse over time, usually little by little. We try to be heroes, but end up the very villains we bemoan.\r\n\r\n\"Okay, how can I do better?\" you ask. In this talk we'll cover five simple things you can do to hack yourself into writing better comments.",
    "presentation_id": 135,
    "feedback_url": "https://pyohio.typeform.com/to/ApNsWh",
    "speakers": [
      {
        "photo": {
          "description": "Nik Kantar",
          "url": "https://static.pyohio.org/2019/speakers/251.jpg"
        },
        "website": "",
        "biography_html": "<p>Nik is a <em>huge</em> Python fan, SoCal Python meetup organizer, and aspiring famous person. He uses Python to build services on the sweetgreen Data Team, where he also professes the virtues of good software architecture, documentation, testing, and standards of all sorts.</p>",
        "name": "Nik Kantar",
        "mastodon": "",
        "biography": "Nik is a _huge_ Python fan, SoCal Python meetup organizer, and aspiring famous person. He uses Python to build services on the sweetgreen Data Team, where he also professes the virtues of good software architecture, documentation, testing, and standards of all sorts.",
        "speaker_id": 251,
        "twitter": "nkantar"
      }
    ],
    "abstract_html": "<p>Documentation often gets paid lip service, and code comments almost always suffer the most. And yet they're often that last-moment savior during archeological expeditions into depths no longer known, unearthing obscure bugs or just trying to understand the foundation upon which to build something new.</p>\n<p>Alas, we're all human, and thus oh so very fallible. And so we fall prey to habits which make the situation worse over time, usually little by little. We try to be heroes, but end up the very villains we bemoan.</p>\n<p>\"Okay, how can I do better?\" you ask. In this talk we'll cover five simple things you can do to hack yourself into writing better comments.</p>",
    "description": "This talk covers five unexpected pieces of advice for writing better code comments. From an editor change to some sound writing advice, it takes a brief journey into a few habits of successful commenters. Disclaimer: opinions ahead!",
    "description_html": "<p>This talk covers five unexpected pieces of advice for writing better code comments. From an editor change to some sound writing advice, it takes a brief journey into a few habits of successful commenters. Disclaimer: opinions ahead!</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T16:30:00"
  },
  {
    "title": "Using Dash to Create Interactive Web Apps for Non-Technical Audiences",
    "youtube_url": "http://youtu.be/GiNF9diitAM",
    "schedule": {
      "room": "Barbie Tootle",
      "end": "2019-07-27T12:30:00",
      "start": "2019-07-27T12:00:00"
    },
    "abstract": "Analytical web applications can serve as a powerful means for scientists and engineers to interact with data and identify trends in a concise and straightforward manner. Such tools can allow users to immediately see the effects of modifying specific input parameters. Additionally, interactive web apps can be utilized to present data visualizations and analysis results in engaging ways.\r\n\r\nUnless you're a full-stack developer, creating these types of web applications may seem quite challenging. Dash, a Python framework written on top of Flask, Plotly.js, and React.js, handles many of the complexities associated with building custom interfaces and provides users the ability to build powerful data visualizations strictly through Python.\r\n\r\nDespite being an intermediate Python user lacking full knowledge of the technologies and protocols required to build web-based applications, I was able to create a UI using Dash. More specifically, I built an interactive dashboard for firefighters to process and interact with sensor data collected during performance testing of their rescue equipment.\r\n\r\nDuring this talk, I will briefly detail the motivation behind this project. Then, I'll describe how the project progressed to its current state, while highlighting key points that can be applied to the general case of developing interactive web apps for audiences from non-technical backgrounds. To conclude my presentation, I will show a demo of the interactive web app and summarize the key takeaways.",
    "presentation_id": 76,
    "feedback_url": "https://pyohio.typeform.com/to/vspUhM",
    "speakers": [
      {
        "photo": {
          "description": "Joseph Willi",
          "url": "https://static.pyohio.org/2019/speakers/259.jpg"
        },
        "website": "",
        "biography_html": "<p>Joseph Willi works as a Research Engineer with the Underwriters Laboratories Firefighter Safety Research Institute (FSRI), a group dedicated to increasing firefighter knowledge to reduce injuries and deaths in the fire service and communities they serve. Along with other members of the FSRI team, Joe regularly utilizes Python for his work, most frequently during the data acquisition and analysis portions of research projects. Additionally, he has incorporated Python into projects involving image analysis and object detection applications. Joseph holds a bachelor's degree in General Engineering from the University of Illinois at Urbana-Champaign as well as a master's degree in Fire Protection Engineering from the University of Maryland, College Park.</p>",
        "name": "Joseph Willi",
        "mastodon": "",
        "biography": "Joseph Willi works as a Research Engineer with the Underwriters Laboratories Firefighter Safety Research Institute (FSRI), a group dedicated to increasing firefighter knowledge to reduce injuries and deaths in the fire service and communities they serve. Along with other members of the FSRI team, Joe regularly utilizes Python for his work, most frequently during the data acquisition and analysis portions of research projects. Additionally, he has incorporated Python into projects involving image analysis and object detection applications. Joseph holds a bachelor's degree in General Engineering from the University of Illinois at Urbana-Champaign as well as a master's degree in Fire Protection Engineering from the University of Maryland, College Park.",
        "speaker_id": 259,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>Analytical web applications can serve as a powerful means for scientists and engineers to interact with data and identify trends in a concise and straightforward manner. Such tools can allow users to immediately see the effects of modifying specific input parameters. Additionally, interactive web apps can be utilized to present data visualizations and analysis results in engaging ways.</p>\n<p>Unless you're a full-stack developer, creating these types of web applications may seem quite challenging. Dash, a Python framework written on top of Flask, Plotly.js, and React.js, handles many of the complexities associated with building custom interfaces and provides users the ability to build powerful data visualizations strictly through Python.</p>\n<p>Despite being an intermediate Python user lacking full knowledge of the technologies and protocols required to build web-based applications, I was able to create a UI using Dash. More specifically, I built an interactive dashboard for firefighters to process and interact with sensor data collected during performance testing of their rescue equipment.</p>\n<p>During this talk, I will briefly detail the motivation behind this project. Then, I'll describe how the project progressed to its current state, while highlighting key points that can be applied to the general case of developing interactive web apps for audiences from non-technical backgrounds. To conclude my presentation, I will show a demo of the interactive web app and summarize the key takeaways.</p>",
    "description": "Have you ever struggled with finding ways to present data visualizations and/or results to non-technical audiences in a coherent and engaging manner? In this talk, I'll detail how I overcame such a challenge by using Dash to build an interactive app for firefighters to use during performance testing of their rescue equipment.",
    "description_html": "<p>Have you ever struggled with finding ways to present data visualizations and/or results to non-technical audiences in a coherent and engaging manner? In this talk, I'll detail how I overcame such a challenge by using Dash to build an interactive app for firefighters to use during performance testing of their rescue equipment.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T12:00:00"
  },
  {
    "title": "Using Python & R in Harmony",
    "youtube_url": "http://youtu.be/mTUw-3nxTRE",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-27T17:00:00",
      "start": "2019-07-27T16:30:00"
    },
    "abstract": "How often do you hear the question \"Python or R?\"\r\n\r\nAspiring analytics professionals often feel the need to choose & learn a 'one size fits all' language for their scripting work.  There are many cases, though, where a specific library in Python or R is more effective than similar libraries in the other language.  This can lead to some painful tradeoffs when selecting a single language for your work.  Great news: recent developments have made leveraging both languages in the same workflow easier than ever before.\r\n\r\nIn this talk, we\u2019ll present methods for leveraging R from directly within Python environments (and vice versa).  We will illustrate the use of these methods by using popular libraries to execute common analytics tasks across languages without switching development environments.",
    "presentation_id": 77,
    "feedback_url": "https://pyohio.typeform.com/to/Fq7x7y",
    "speakers": [
      {
        "photo": {
          "description": "Matthew Brower",
          "url": "https://static.pyohio.org/2019/speakers/212.png"
        },
        "website": "",
        "biography_html": "<p>Matthew is a data scientist based in San Francisco, CA.  Prior to moving out west, he grew up &amp; worked in Northeast Ohio.  A recovering R user, his first exposure to the Python language was PyOhio back in 2016.  After a fun &amp; rewarding tenure at Instacart, a grocery delivery startup, Matthew will be beginning a new role at Google in August.</p>",
        "name": "Matthew Brower",
        "mastodon": "",
        "biography": "Matthew is a data scientist based in San Francisco, CA.  Prior to moving out west, he grew up & worked in Northeast Ohio.  A recovering R user, his first exposure to the Python language was PyOhio back in 2016.  After a fun & rewarding tenure at Instacart, a grocery delivery startup, Matthew will be beginning a new role at Google in August.",
        "speaker_id": 212,
        "twitter": ""
      },
      {
        "photo": {
          "description": "Krista Readout",
          "url": "https://static.pyohio.org/2019/speakers/268.png"
        },
        "website": "",
        "biography_html": "<p>Krista is a Data Scientist at a local manufacturing company. She has lived all over Ohio and encourages you to explore the job market here. She volunteers with Girls Who Code in Akron. She/Her</p>",
        "name": "Krista Readout",
        "mastodon": "",
        "biography": "Krista is a Data Scientist at a local manufacturing company. She has lived all over Ohio and encourages you to explore the job market here. She volunteers with Girls Who Code in Akron. She/Her",
        "speaker_id": 268,
        "twitter": "KristaReadout"
      }
    ],
    "abstract_html": "<p>How often do you hear the question \"Python or R?\"</p>\n<p>Aspiring analytics professionals often feel the need to choose &amp; learn a 'one size fits all' language for their scripting work.  There are many cases, though, where a specific library in Python or R is more effective than similar libraries in the other language.  This can lead to some painful tradeoffs when selecting a single language for your work.  Great news: recent developments have made leveraging both languages in the same workflow easier than ever before.</p>\n<p>In this talk, we\u2019ll present methods for leveraging R from directly within Python environments (and vice versa).  We will illustrate the use of these methods by using popular libraries to execute common analytics tasks across languages without switching development environments.</p>",
    "description": "Python and R are two of the most popular languages used for data analysis.  They are often pitted against each other in pros and cons lists, where users feel forced to pick just one.  Each has unique advantages, and it's now easier than ever to use them harmoniously.  Python or R?  Why not both?",
    "description_html": "<p>Python and R are two of the most popular languages used for data analysis.  They are often pitted against each other in pros and cons lists, where users feel forced to pick just one.  Each has unique advantages, and it's now easier than ever to use them harmoniously.  Python or R?  Why not both?</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T16:30:00"
  },
  {
    "title": "What's the Buzz with Machine Learning",
    "youtube_url": "http://youtu.be/upmI8mg2NTo",
    "schedule": {
      "room": "Cartoon 2",
      "end": "2019-07-28T14:15:00",
      "start": "2019-07-28T13:45:00"
    },
    "abstract": "Pesticides, parasites, and poor nutrition, has led to the decline of honeybee colonies throughout North America. A number of methods have been proposed to combat the problem, with one here at Grand Valley State University (GVSU) focusing on collecting hive weight data identifying potential issues through data analytics. Currently, \u201ccitizen scientist\u201d beekeepers participate by collecting weight data from their hives through the Bee Informed Partnership (BIP). Using Python3, Bokeh, SciKit learn and Pandas we were able to produce a model using linear regression that could predict patterns in weight data. Our short term goal for the project was to create a model that could predict events and windows of time where events could have occured to improve the data quality and user engagement. The ultimate long term goal of this project is to predict what kind of event occurred such as adding food to the hive, harvesting honey, swarming events, and even parasite infestation.",
    "presentation_id": 90,
    "feedback_url": "https://pyohio.typeform.com/to/rdP3WL",
    "speakers": [
      {
        "photo": {
          "description": "Allison Bolen",
          "url": "https://static.pyohio.org/2019/speakers/220.jpg"
        },
        "website": "",
        "biography_html": "<p>I just recently graduated with a Bachelors degree in Computer Information Systems, specifically computer science and software engineering. I love working on software and solving problems!  In my free time I like to research machine learning and game development, though I am still a junior developer so I am always looking for new topics to learn about and tools to try. My favorite video games right now are Stardew Valley and any Pokemon game. Outside to software and tech I like to work out at the gym (leg day is my favorite day!), take my dogs to the park and work on drawing and typography.</p>",
        "name": "Allison Bolen",
        "mastodon": "",
        "biography": "I just recently graduated with a Bachelors degree in Computer Information Systems, specifically computer science and software engineering. I love working on software and solving problems!  In my free time I like to research machine learning and game development, though I am still a junior developer so I am always looking for new topics to learn about and tools to try. My favorite video games right now are Stardew Valley and any Pokemon game. Outside to software and tech I like to work out at the gym (leg day is my favorite day!), take my dogs to the park and work on drawing and typography.",
        "speaker_id": 220,
        "twitter": ""
      }
    ],
    "abstract_html": "<p>Pesticides, parasites, and poor nutrition, has led to the decline of honeybee colonies throughout North America. A number of methods have been proposed to combat the problem, with one here at Grand Valley State University (GVSU) focusing on collecting hive weight data identifying potential issues through data analytics. Currently, \u201ccitizen scientist\u201d beekeepers participate by collecting weight data from their hives through the Bee Informed Partnership (BIP). Using Python3, Bokeh, SciKit learn and Pandas we were able to produce a model using linear regression that could predict patterns in weight data. Our short term goal for the project was to create a model that could predict events and windows of time where events could have occured to improve the data quality and user engagement. The ultimate long term goal of this project is to predict what kind of event occurred such as adding food to the hive, harvesting honey, swarming events, and even parasite infestation.</p>",
    "description": "Honeybee colonies throughout North America have declined precipitously due to parasites, pesticides, and poor nutrition over the past two decades. Monitoring hive health autonomously assists beekeeper efforts.  We developed a model which automatically detects events in bee hive weight data assisting data collection efforts improving data quality for future machine learning models to be developed.",
    "description_html": "<p>Honeybee colonies throughout North America have declined precipitously due to parasites, pesticides, and poor nutrition over the past two decades. Monitoring hive health autonomously assists beekeeper efforts.  We developed a model which automatically detects events in bee hive weight data assisting data collection efforts improving data quality for future machine learning models to be developed.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-28T13:45:00"
  },
  {
    "title": "\u201cWho\u2019d I Lend That Book To?\u201d Hard Questions Answered with Python",
    "youtube_url": "http://youtu.be/re6mt9d5Qw4",
    "schedule": {
      "room": "Hays Cape",
      "end": "2019-07-27T11:00:00",
      "start": "2019-07-27T10:30:00"
    },
    "abstract": "The Internet of Things (IoT) is here to stay, but getting started can seem intimidating. Inspired by the magical checkout process at my local library, I began the journey of building my own IoT book lending application. Along the way, I discovered that Python was consistently able to make the impossible seem approachable!\r\n\r\nWe\u2019ll start with a base installation of Raspbian on a Raspberry Pi and find that Python is already there waiting to help. Then we\u2019ll hook up an RFID reader to our Pi, and see that even though it has wires and pins, it\u2019s nothing to be scared of. With the RFID reader and the fantastic MFRC522-python library, we\u2019re able to read and write data to RFID stickers, neat!\r\n\r\nWe could stop here, but we\u2019ve got Python, so let\u2019s hook it up to a Flask app and end at a complete book lending application. I hope attendees will gain an appreciation for the technology all around them, their local library, and how powerful Python is. I hope to demystify working with hardware and dispel some perceived barriers to entry for IoT applications.",
    "presentation_id": 82,
    "feedback_url": "https://pyohio.typeform.com/to/PeM6Ld",
    "speakers": [
      {
        "photo": {
          "description": "Daniel Lindeman",
          "url": "https://static.pyohio.org/2019/speakers/48.jpg"
        },
        "website": "",
        "biography_html": "<p>Dan is a Software Engineer from Grand Rapids, MI. When not learning a new language, framework, or piece of tech, Dan enjoys Pine Needle Basket Weaving, Nintendo games, and anything involving renewable energy.</p>\n<p>An educator-turned-developer, Dan got his start in the software industry testing embedded automotive infotainment systems. He recently earned his Masters in Computer Science with an emphasis on Distributed Systems at at Grand Valley State University. Oh, he is a self-described conference junkie.</p>",
        "name": "Daniel Lindeman",
        "mastodon": "",
        "biography": "Dan is a Software Engineer from Grand Rapids, MI. When not learning a new language, framework, or piece of tech, Dan enjoys Pine Needle Basket Weaving, Nintendo games, and anything involving renewable energy.\r\n\r\nAn educator-turned-developer, Dan got his start in the software industry testing embedded automotive infotainment systems. He recently earned his Masters in Computer Science with an emphasis on Distributed Systems at at Grand Valley State University. Oh, he is a self-described conference junkie.",
        "speaker_id": 48,
        "twitter": "lindemda"
      }
    ],
    "abstract_html": "<p>The Internet of Things (IoT) is here to stay, but getting started can seem intimidating. Inspired by the magical checkout process at my local library, I began the journey of building my own IoT book lending application. Along the way, I discovered that Python was consistently able to make the impossible seem approachable!</p>\n<p>We\u2019ll start with a base installation of Raspbian on a Raspberry Pi and find that Python is already there waiting to help. Then we\u2019ll hook up an RFID reader to our Pi, and see that even though it has wires and pins, it\u2019s nothing to be scared of. With the RFID reader and the fantastic MFRC522-python library, we\u2019re able to read and write data to RFID stickers, neat!</p>\n<p>We could stop here, but we\u2019ve got Python, so let\u2019s hook it up to a Flask app and end at a complete book lending application. I hope attendees will gain an appreciation for the technology all around them, their local library, and how powerful Python is. I hope to demystify working with hardware and dispel some perceived barriers to entry for IoT applications.</p>",
    "description": "I love reading books, but I love lending them out even more! In order to keep track of my personal library, a daunting task indeed, I\u2019ve employed Python, a Raspberry Pi, and an RFID reader. Take a tour through what it\u2019s like working with hardware, Python, and putting it all together into a useful web application. This is a beginner friendly talk, so don\u2019t worry if you\u2019ve never worked with hardware",
    "description_html": "<p>I love reading books, but I love lending them out even more! In order to keep track of my personal library, a daunting task indeed, I\u2019ve employed Python, a Raspberry Pi, and an RFID reader. Take a tour through what it\u2019s like working with hardware, Python, and putting it all together into a useful web application. This is a beginner friendly talk, so don\u2019t worry if you\u2019ve never worked with hardware</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T10:30:00"
  },
  {
    "title": "Your Own Personal Bootcamp: How to Efficiently Learn Your Next Technology",
    "youtube_url": "http://youtu.be/RewDPZrgRls",
    "schedule": {
      "room": "Cartoon 1",
      "end": "2019-07-27T17:00:00",
      "start": "2019-07-27T16:30:00"
    },
    "abstract": "With the wealth of learning materials out there, why is it still not easy to pick up and learn new technologies? Why do we still have trouble going from learning to doing? With limited time to pick up the new things that will advance our careers, what's the most efficient way to retain and implement the new skills that we need? Taking lessons from adult learning theory and from examples of hundreds of bootcamp students, this talk will walk through what I have learned about accelerated adult learning and tell you the what and the why around techniques that you can use to more efficiently pick up your next technology in record time.\r\n\r\nThere has been substantial research done on how adults learn, but they aren't widely known. Using the same learning tactics you used as a kid doesn't always bring the best results or results that will stick. Adults shouldn't be aiming to memorize facts for a test, they should be looking to build long term skills that they can apply when needed.\r\n\r\nThis talk will pass on some of the most important and actionable findings in adult learning research and will walk attendees through a path to learning a new skill that is efficient and effective.\r\n\r\nTopics include:\r\n\r\n- The Dreyfus Model of Learning\r\n- How learning shifts between the novice and the intermediate\r\n- Understanding the levels of mastery\r\n- The Effective Tech Bootcamp model of learning\r\n- What learning techniques are effective and why\r\n- Creating a learning plan that works for you",
    "presentation_id": 94,
    "feedback_url": "https://pyohio.typeform.com/to/wBj0Xy",
    "speakers": [
      {
        "photo": {
          "description": "Joe Erickson",
          "url": "https://static.pyohio.org/2019/speakers/210.png"
        },
        "website": "",
        "biography_html": "<p>Joe Erickson is a web programmer that has been building internet applications for Fortune 100 and small businesses alike for over 20 years. He has built production ready applications in Java, PHP, Perl, C++, Ruby, and JavaScript. He is currently developing DowntownTX.org for the Texas Historical Commission and, when not working on that, Joe is an Instructor and Curriculum Developer at Tech Elevator in Cleveland, OH.</p>",
        "name": "Joe Erickson",
        "mastodon": "",
        "biography": "Joe Erickson is a web programmer that has been building internet applications for Fortune 100 and small businesses alike for over 20 years. He has built production ready applications in Java, PHP, Perl, C++, Ruby, and JavaScript. He is currently developing DowntownTX.org for the Texas Historical Commission and, when not working on that, Joe is an Instructor and Curriculum Developer at Tech Elevator in Cleveland, OH.",
        "speaker_id": 210,
        "twitter": "firstclown"
      }
    ],
    "abstract_html": "<p>With the wealth of learning materials out there, why is it still not easy to pick up and learn new technologies? Why do we still have trouble going from learning to doing? With limited time to pick up the new things that will advance our careers, what's the most efficient way to retain and implement the new skills that we need? Taking lessons from adult learning theory and from examples of hundreds of bootcamp students, this talk will walk through what I have learned about accelerated adult learning and tell you the what and the why around techniques that you can use to more efficiently pick up your next technology in record time.</p>\n<p>There has been substantial research done on how adults learn, but they aren't widely known. Using the same learning tactics you used as a kid doesn't always bring the best results or results that will stick. Adults shouldn't be aiming to memorize facts for a test, they should be looking to build long term skills that they can apply when needed.</p>\n<p>This talk will pass on some of the most important and actionable findings in adult learning research and will walk attendees through a path to learning a new skill that is efficient and effective.</p>\n<p>Topics include:</p>\n<ul>\n<li>The Dreyfus Model of Learning</li>\n<li>How learning shifts between the novice and the intermediate</li>\n<li>Understanding the levels of mastery</li>\n<li>The Effective Tech Bootcamp model of learning</li>\n<li>What learning techniques are effective and why</li>\n<li>Creating a learning plan that works for you</li>\n</ul>",
    "description": "Taking lessons from adult learning theory and from examples of hundreds of bootcamp students, this talk will walk through what I have learned about accelerated adult learning and tell you the what and the why around techniques that you can use to more efficiently pick up your next technology in record time.",
    "description_html": "<p>Taking lessons from adult learning theory and from examples of hundreds of bootcamp students, this talk will walk through what I have learned about accelerated adult learning and tell you the what and the why around techniques that you can use to more efficiently pick up your next technology in record time.</p>",
    "kind": "30-minute Talk",
    "start_time": "2019-07-27T16:30:00"
  }
]