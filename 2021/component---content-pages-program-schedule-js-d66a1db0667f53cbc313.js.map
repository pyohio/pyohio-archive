{"version":3,"sources":["webpack://pyohio-static-website/./content/pages/program/schedule.js"],"names":["TalksPage","render","talkList","this","props","data","allTalksYaml","edges","formatTime","timeString","DateTime","setZone","toFormat","title","sx","backgroundColor","tr","td","border","borderColor","pl","pr","th","map","talk","node","key","id","start_time","end_time","as","fontSize","Link","to","slug","color","type","speakers","s","name","reduce","prev","curr","React"],"mappings":"iQAQqBA,E,6FACnBC,OAAA,WACE,IACeC,EADEC,KAAKC,MAAdC,KACyBC,aAAzBC,MAER,SAASC,EAAWC,GAClB,OAAOC,aAAiBD,GACrBE,QAAQ,oBACRC,SAAS,SAGd,OACE,QAAC,KAAD,MACE,QAAC,KAAD,CAAKC,MAAM,0BACX,QAAC,QAAD,kBACA,QAAC,QAAD,8CACA,QAAC,KAAD,CAASC,GAAI,CAAEC,gBAAiB,UAAhC,iFAKA,QAAC,WAAD,CACED,GAAI,CACFE,GAAI,CACFC,GAAI,CACFC,OAAQ,YACRC,YAAa,QACbC,GAAI,OACJC,GAAI,QAENC,GAAI,CACFP,gBAAiB,QACjBG,OAAQ,YACRC,YAAa,aAKnB,mBACE,4BACA,0BACA,2BAEDjB,EAASqB,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACZ,cAAIC,IAAKF,EAAKG,KACZ,kBAAKnB,EAAWgB,EAAKI,cACrB,kBAAKpB,EAAWgB,EAAKK,YAErB,mBACE,QAAC,OAAD,CACEC,GAAG,KACHhB,GAAI,CACFiB,SAAU,KAGZ,QAAC,OAAD,CACED,GAAIE,OACJC,GAAE,kBAAoBT,EAAKU,KAC3BpB,GAAI,CAAEqB,MAAO,cAEZX,EAAKX,QAGK,UAAdW,EAAKY,OACJ,yBACK,IACFZ,EAAKa,SACHd,KAAI,SAACe,GAAD,OACH,QAAC,OAAD,CAAUR,GAAIE,OAAMC,GAAE,qBAAuBK,EAAEJ,MAC5CI,EAAEC,SAGNC,QAAO,SAACC,EAAMC,GAAP,MAAgB,CAACD,EAAM,KAAMC,e,GAxEpBC","file":"component---content-pages-program-schedule-js-d66a1db0667f53cbc313.js","sourcesContent":["/** @jsx jsx */\n\nimport { Layout, Seo } from \"gatsby-theme-catalyst-core\"\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { jsx, Message, Themed } from \"theme-ui\"\nimport { DateTime } from \"luxon\"\n\nexport default class TalksPage extends React.Component {\n  render() {\n    const { data } = this.props\n    const { edges: talkList } = data.allTalksYaml\n\n    function formatTime(timeString) {\n      return DateTime.fromISO(timeString)\n        .setZone(\"America/New_York\")\n        .toFormat(\"h:mma\")\n    }\n\n    return (\n      <Layout>\n        <Seo title=\"PyOhio 2022 Schedule\" />\n        <Themed.h1>Schedule</Themed.h1>\n        <Themed.h2>To be announced closer to the event!</Themed.h2>\n        <Message sx={{ backgroundColor: \"muted\" }}>\n          PyOhio is July 30, 2022. Times rounded to the nearest 5 mins. All\n          times EDT.\n        </Message>\n\n        <Themed.table\n          sx={{\n            tr: {\n              td: {\n                border: \"2px solid\",\n                borderColor: \"muted\",\n                pl: \"10px\",\n                pr: \"10px\",\n              },\n              th: {\n                backgroundColor: \"muted\",\n                border: \"2px solid\",\n                borderColor: \"muted\",\n              },\n            },\n          }}\n        >\n          <tr>\n            <th>Start</th>\n            <th>End</th>\n            <th>Talk</th>\n          </tr>\n          {talkList.map(({ node: talk }) => (\n            <tr key={talk.id}>\n              <td>{formatTime(talk.start_time)}</td>\n              <td>{formatTime(talk.end_time)}</td>\n\n              <td>\n                <Themed.a\n                  as=\"h2\"\n                  sx={{\n                    fontSize: 2,\n                  }}\n                >\n                  <Themed.a\n                    as={Link}\n                    to={`/program/talks/${talk.slug}`}\n                    sx={{ color: \"highlight\" }}\n                  >\n                    {talk.title}\n                  </Themed.a>\n                </Themed.a>\n                {talk.type !== \"Break\" && (\n                  <span>\n                    by{\" \"}\n                    {talk.speakers\n                      .map((s) => (\n                        <Themed.a as={Link} to={`/program/speakers/${s.slug}`}>\n                          {s.name}\n                        </Themed.a>\n                      ))\n                      .reduce((prev, curr) => [prev, \", \", curr])}\n                  </span>\n                )}\n              </td>\n            </tr>\n          ))}\n        </Themed.table>\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query TalkScheduleQuery {\n    allTalksYaml(\n      sort: { fields: [start_time] }\n      filter: { type: { ne: \"Bonus Talk\" } }\n    ) {\n      edges {\n        node {\n          title\n          slug\n          type\n          start_time\n          end_time\n          speakers {\n            name\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}